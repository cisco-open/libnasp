// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package response

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/messages/createtopics/response/creatabletopicresult"
	typesbytes "github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var creatableTopicResultName = fields.Context{
	SpecName:                    "Name",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var creatableTopicResultTopicId = fields.Context{
	SpecName:                    "TopicId",
	LowestSupportedVersion:      7,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var creatableTopicResultErrorCode = fields.Context{
	SpecName:                    "ErrorCode",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var creatableTopicResultErrorMessage = fields.Context{
	SpecName:                        "ErrorMessage",
	LowestSupportedVersion:          1,
	HighestSupportedVersion:         32767,
	LowestSupportedFlexVersion:      5,
	HighestSupportedFlexVersion:     32767,
	LowestSupportedNullableVersion:  0,
	HighestSupportedNullableVersion: 32767,
}
var creatableTopicResultTopicConfigErrorCode = fields.Context{
	SpecName:                      "TopicConfigErrorCode",
	SpecTag:                       fields.Tag(0),
	LowestSupportedVersion:        5,
	HighestSupportedVersion:       32767,
	LowestSupportedFlexVersion:    5,
	HighestSupportedFlexVersion:   32767,
	LowestSupportedTaggedVersion:  5,
	HighestSupportedTaggedVersion: 32767,
}
var creatableTopicResultNumPartitions = fields.Context{
	SpecName:                    "NumPartitions",
	CustomDefaultValue:          int32(-1),
	LowestSupportedVersion:      5,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var creatableTopicResultReplicationFactor = fields.Context{
	SpecName:                    "ReplicationFactor",
	CustomDefaultValue:          int16(-1),
	LowestSupportedVersion:      5,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var creatableTopicResultConfigs = fields.Context{
	SpecName:                        "Configs",
	LowestSupportedVersion:          5,
	HighestSupportedVersion:         32767,
	LowestSupportedFlexVersion:      5,
	HighestSupportedFlexVersion:     32767,
	LowestSupportedNullableVersion:  5,
	HighestSupportedNullableVersion: 32767,
}

type CreatableTopicResult struct {
	configs              []creatabletopicresult.CreatableTopicConfigs
	unknownTaggedFields  []fields.RawTaggedField
	name                 fields.NullableString
	errorMessage         fields.NullableString
	numPartitions        int32
	errorCode            int16
	topicConfigErrorCode int16
	replicationFactor    int16
	topicId              fields.UUID
	isNil                bool
}

func (o *CreatableTopicResult) Name() fields.NullableString {
	return o.name
}

func (o *CreatableTopicResult) SetName(val fields.NullableString) {
	o.isNil = false
	o.name = val
}

func (o *CreatableTopicResult) TopicId() fields.UUID {
	return o.topicId
}

func (o *CreatableTopicResult) SetTopicId(val fields.UUID) {
	o.isNil = false
	o.topicId = val
}

func (o *CreatableTopicResult) ErrorCode() int16 {
	return o.errorCode
}

func (o *CreatableTopicResult) SetErrorCode(val int16) {
	o.isNil = false
	o.errorCode = val
}

func (o *CreatableTopicResult) ErrorMessage() fields.NullableString {
	return o.errorMessage
}

func (o *CreatableTopicResult) SetErrorMessage(val fields.NullableString) {
	o.isNil = false
	o.errorMessage = val
}

func (o *CreatableTopicResult) TopicConfigErrorCode() int16 {
	return o.topicConfigErrorCode
}

func (o *CreatableTopicResult) SetTopicConfigErrorCode(val int16) {
	o.isNil = false
	o.topicConfigErrorCode = val
}

func (o *CreatableTopicResult) NumPartitions() int32 {
	return o.numPartitions
}

func (o *CreatableTopicResult) SetNumPartitions(val int32) {
	o.isNil = false
	o.numPartitions = val
}

func (o *CreatableTopicResult) ReplicationFactor() int16 {
	return o.replicationFactor
}

func (o *CreatableTopicResult) SetReplicationFactor(val int16) {
	o.isNil = false
	o.replicationFactor = val
}

func (o *CreatableTopicResult) Configs() []creatabletopicresult.CreatableTopicConfigs {
	return o.configs
}

func (o *CreatableTopicResult) SetConfigs(val []creatabletopicresult.CreatableTopicConfigs) {
	o.isNil = false
	o.configs = val
}

func (o *CreatableTopicResult) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *CreatableTopicResult) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *CreatableTopicResult) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	nameField := fields.String{Context: creatableTopicResultName}
	if err := nameField.Read(buf, version, &o.name); err != nil {
		return errors.WrapIf(err, "couldn't set \"name\" field")
	}

	topicIdField := fields.Uuid{Context: creatableTopicResultTopicId}
	if err := topicIdField.Read(buf, version, &o.topicId); err != nil {
		return errors.WrapIf(err, "couldn't set \"topicId\" field")
	}

	errorCodeField := fields.Int16{Context: creatableTopicResultErrorCode}
	if err := errorCodeField.Read(buf, version, &o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't set \"errorCode\" field")
	}

	errorMessageField := fields.String{Context: creatableTopicResultErrorMessage}
	if err := errorMessageField.Read(buf, version, &o.errorMessage); err != nil {
		return errors.WrapIf(err, "couldn't set \"errorMessage\" field")
	}

	numPartitionsField := fields.Int32{Context: creatableTopicResultNumPartitions}
	if err := numPartitionsField.Read(buf, version, &o.numPartitions); err != nil {
		return errors.WrapIf(err, "couldn't set \"numPartitions\" field")
	}

	replicationFactorField := fields.Int16{Context: creatableTopicResultReplicationFactor}
	if err := replicationFactorField.Read(buf, version, &o.replicationFactor); err != nil {
		return errors.WrapIf(err, "couldn't set \"replicationFactor\" field")
	}

	configsField := fields.ArrayOfStruct[creatabletopicresult.CreatableTopicConfigs, *creatabletopicresult.CreatableTopicConfigs]{Context: creatableTopicResultConfigs}
	configs, err := configsField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"configs\" field")
	}
	o.configs = configs

	// process tagged fields

	if version < CreatableTopicResultLowestSupportedFlexVersion() || version > CreatableTopicResultHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	topicConfigErrorCodeField := fields.Int16{Context: creatableTopicResultTopicConfigErrorCode}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	for i := range rawTaggedFields {
		switch rawTaggedFields[i].Tag() {
		case 0:
			if !creatableTopicResultTopicConfigErrorCode.IsTaggedVersion(version) {
				return errors.New(strings.Join([]string{"tagged field \"topicConfigErrorCode\" is not supported by version", strconv.Itoa(int(version))}, " "))
			}
			if err := topicConfigErrorCodeField.Read(bytes.NewReader(rawTaggedFields[i].Value()), version, &o.topicConfigErrorCode); err != nil {
				return errors.WrapIf(err, "couldn't set \"topicConfigErrorCode\" field")
			}
			rawTaggedFields[i].Release()
		default:
			o.unknownTaggedFields = append(o.unknownTaggedFields, rawTaggedFields[i])
		}
	}

	o.isNil = false
	return nil
}

func (o *CreatableTopicResult) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	nameField := fields.String{Context: creatableTopicResultName}
	if err := nameField.Write(buf, version, o.name); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"name\" field")
	}
	topicIdField := fields.Uuid{Context: creatableTopicResultTopicId}
	if err := topicIdField.Write(buf, version, o.topicId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"topicId\" field")
	}
	errorCodeField := fields.Int16{Context: creatableTopicResultErrorCode}
	if err := errorCodeField.Write(buf, version, o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"errorCode\" field")
	}
	errorMessageField := fields.String{Context: creatableTopicResultErrorMessage}
	if err := errorMessageField.Write(buf, version, o.errorMessage); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"errorMessage\" field")
	}
	topicConfigErrorCodeField := fields.Int16{Context: creatableTopicResultTopicConfigErrorCode}
	numPartitionsField := fields.Int32{Context: creatableTopicResultNumPartitions}
	if err := numPartitionsField.Write(buf, version, o.numPartitions); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"numPartitions\" field")
	}
	replicationFactorField := fields.Int16{Context: creatableTopicResultReplicationFactor}
	if err := replicationFactorField.Write(buf, version, o.replicationFactor); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"replicationFactor\" field")
	}

	configsField := fields.ArrayOfStruct[creatabletopicresult.CreatableTopicConfigs, *creatabletopicresult.CreatableTopicConfigs]{Context: creatableTopicResultConfigs}
	if err := configsField.Write(buf, version, o.configs); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"configs\" field")
	}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < CreatableTopicResultLowestSupportedFlexVersion() || version > CreatableTopicResultHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)
	var taggedField fields.RawTaggedField

	if creatableTopicResultTopicConfigErrorCode.IsTaggedVersion(version) && o.topicConfigErrorCode != 0 {
		size, err := topicConfigErrorCodeField.SizeInBytes(version, o.topicConfigErrorCode)
		if err != nil {
			return errors.WrapIf(err, "couldn't determine \"topicConfigErrorCode\" field size in bytes")
		}
		w := typesbytes.NewSliceWriter(make([]byte, 0, size))
		if err := topicConfigErrorCodeField.Write(&w, version, o.topicConfigErrorCode); err != nil {
			return errors.WrapIf(err, "couldn't serialize \"topicConfigErrorCode\" field")
		}
		taggedField.SetTag(0)
		taggedField.SetValue(w.Bytes())
		rawTaggedFields = append(rawTaggedFields, taggedField)
	}

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *CreatableTopicResult) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *CreatableTopicResult) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 9)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.name); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"name\""), b}, []byte(": ")))
	}
	if b, err := fields.BytesMarshalJSON("topicId", o.topicId[:]); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.errorCode); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"errorCode\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.errorMessage); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"errorMessage\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.topicConfigErrorCode); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"topicConfigErrorCode\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.numPartitions); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"numPartitions\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.replicationFactor); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"replicationFactor\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayOfStructMarshalJSON("configs", o.configs); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *CreatableTopicResult) IsNil() bool {
	return o.isNil
}

func (o *CreatableTopicResult) Clear() {
	o.Release()
	o.isNil = true

	o.configs = nil
	o.unknownTaggedFields = nil
}

func (o *CreatableTopicResult) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.name.SetValue("")
	o.topicId.SetZero()
	o.errorCode = 0
	o.errorMessage.SetValue("")
	o.topicConfigErrorCode = 0
	o.numPartitions = -1
	o.replicationFactor = -1
	for i := range o.configs {
		o.configs[i].Release()
	}
	o.configs = nil

	o.isNil = false
}

func (o *CreatableTopicResult) Equal(that *CreatableTopicResult) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if !o.name.Equal(&that.name) {
		return false
	}
	if o.topicId != that.topicId {
		return false
	}
	if o.errorCode != that.errorCode {
		return false
	}
	if !o.errorMessage.Equal(&that.errorMessage) {
		return false
	}
	if o.topicConfigErrorCode != that.topicConfigErrorCode {
		return false
	}
	if o.numPartitions != that.numPartitions {
		return false
	}
	if o.replicationFactor != that.replicationFactor {
		return false
	}
	if len(o.configs) != len(that.configs) {
		return false
	}
	for i := range o.configs {
		if !o.configs[i].Equal(&that.configs[i]) {
			return false
		}
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *CreatableTopicResult) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	nameField := fields.String{Context: creatableTopicResultName}
	fieldSize, err = nameField.SizeInBytes(version, o.name)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"name\" field")
	}
	size += fieldSize

	topicIdField := fields.Uuid{Context: creatableTopicResultTopicId}
	fieldSize, err = topicIdField.SizeInBytes(version, o.topicId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"topicId\" field")
	}
	size += fieldSize

	errorCodeField := fields.Int16{Context: creatableTopicResultErrorCode}
	fieldSize, err = errorCodeField.SizeInBytes(version, o.errorCode)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"errorCode\" field")
	}
	size += fieldSize

	errorMessageField := fields.String{Context: creatableTopicResultErrorMessage}
	fieldSize, err = errorMessageField.SizeInBytes(version, o.errorMessage)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"errorMessage\" field")
	}
	size += fieldSize

	topicConfigErrorCodeField := fields.Int16{Context: creatableTopicResultTopicConfigErrorCode}

	numPartitionsField := fields.Int32{Context: creatableTopicResultNumPartitions}
	fieldSize, err = numPartitionsField.SizeInBytes(version, o.numPartitions)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"numPartitions\" field")
	}
	size += fieldSize

	replicationFactorField := fields.Int16{Context: creatableTopicResultReplicationFactor}
	fieldSize, err = replicationFactorField.SizeInBytes(version, o.replicationFactor)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"replicationFactor\" field")
	}
	size += fieldSize

	configsField := fields.ArrayOfStruct[creatabletopicresult.CreatableTopicConfigs, *creatabletopicresult.CreatableTopicConfigs]{Context: creatableTopicResultConfigs}
	fieldSize, err = configsField.SizeInBytes(version, o.configs)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"configs\" field")
	}
	size += fieldSize

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < CreatableTopicResultLowestSupportedFlexVersion() || version > CreatableTopicResultHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields
	fieldSize = 0

	if creatableTopicResultTopicConfigErrorCode.IsTaggedVersion(version) && o.topicConfigErrorCode != 0 {
		fieldSize, err = topicConfigErrorCodeField.SizeInBytes(version, o.topicConfigErrorCode)
		if err != nil {
			return 0, errors.WrapIf(err, "couldn't compute size of \"topicConfigErrorCode\" field")
		}
		if int64(fieldSize) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid \"topicConfigErrorCode\" tagged field value length:", strconv.Itoa(fieldSize)}, " "))
		}
		fieldSize += varint.Uint32Size(uint32(fieldSize)) // bytes for serializing the length of the "topicConfigErrorCode" field
		fieldSize += varint.Uint32Size(0)                 // bytes for serializing the tag of the "topicConfigErrorCode" field
		taggedFieldsSize += fieldSize
	}

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *CreatableTopicResult) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	o.name.Release()
	o.errorMessage.Release()
	for i := range o.configs {
		o.configs[i].Release()
	}
	o.configs = nil
}

func (o *CreatableTopicResult) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	if creatableTopicResultTopicConfigErrorCode.IsTaggedVersion(version) && o.topicConfigErrorCode != 0 {
		numTaggedFields++
	}

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *CreatableTopicResult) validateNonIgnorableFields(version int16) error {
	return nil
}

func CreatableTopicResultLowestSupportedVersion() int16 {
	return 0
}

func CreatableTopicResultHighestSupportedVersion() int16 {
	return 32767
}

func CreatableTopicResultLowestSupportedFlexVersion() int16 {
	return 5
}

func CreatableTopicResultHighestSupportedFlexVersion() int16 {
	return 32767
}

func CreatableTopicResultDefault() CreatableTopicResult {
	var d CreatableTopicResult
	d.SetDefault()

	return d
}
