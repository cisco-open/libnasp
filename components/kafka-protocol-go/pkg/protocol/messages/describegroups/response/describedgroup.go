// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package response

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	"github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/messages/describegroups/response/describedgroup"
	typesbytes "github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var describedGroupErrorCode = fields.Context{
	SpecName:                    "ErrorCode",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var describedGroupGroupId = fields.Context{
	SpecName:                    "GroupId",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var describedGroupGroupState = fields.Context{
	SpecName:                    "GroupState",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var describedGroupProtocolType = fields.Context{
	SpecName:                    "ProtocolType",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var describedGroupProtocolData = fields.Context{
	SpecName:                    "ProtocolData",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var describedGroupMembers = fields.Context{
	SpecName:                    "Members",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}
var describedGroupAuthorizedOperations = fields.Context{
	SpecName:                    "AuthorizedOperations",
	CustomDefaultValue:          int32(-2147483648),
	LowestSupportedVersion:      3,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  5,
	HighestSupportedFlexVersion: 32767,
}

type DescribedGroup struct {
	members              []describedgroup.DescribedGroupMember
	unknownTaggedFields  []fields.RawTaggedField
	groupId              fields.NullableString
	groupState           fields.NullableString
	protocolType         fields.NullableString
	protocolData         fields.NullableString
	authorizedOperations int32
	errorCode            int16
	isNil                bool
}

func (o *DescribedGroup) ErrorCode() int16 {
	return o.errorCode
}

func (o *DescribedGroup) SetErrorCode(val int16) {
	o.isNil = false
	o.errorCode = val
}

func (o *DescribedGroup) GroupId() fields.NullableString {
	return o.groupId
}

func (o *DescribedGroup) SetGroupId(val fields.NullableString) {
	o.isNil = false
	o.groupId = val
}

func (o *DescribedGroup) GroupState() fields.NullableString {
	return o.groupState
}

func (o *DescribedGroup) SetGroupState(val fields.NullableString) {
	o.isNil = false
	o.groupState = val
}

func (o *DescribedGroup) ProtocolType() fields.NullableString {
	return o.protocolType
}

func (o *DescribedGroup) SetProtocolType(val fields.NullableString) {
	o.isNil = false
	o.protocolType = val
}

func (o *DescribedGroup) ProtocolData() fields.NullableString {
	return o.protocolData
}

func (o *DescribedGroup) SetProtocolData(val fields.NullableString) {
	o.isNil = false
	o.protocolData = val
}

func (o *DescribedGroup) Members() []describedgroup.DescribedGroupMember {
	return o.members
}

func (o *DescribedGroup) SetMembers(val []describedgroup.DescribedGroupMember) {
	o.isNil = false
	o.members = val
}

func (o *DescribedGroup) AuthorizedOperations() int32 {
	return o.authorizedOperations
}

func (o *DescribedGroup) SetAuthorizedOperations(val int32) {
	o.isNil = false
	o.authorizedOperations = val
}

func (o *DescribedGroup) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *DescribedGroup) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *DescribedGroup) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	errorCodeField := fields.Int16{Context: describedGroupErrorCode}
	if err := errorCodeField.Read(buf, version, &o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't set \"errorCode\" field")
	}

	groupIdField := fields.String{Context: describedGroupGroupId}
	if err := groupIdField.Read(buf, version, &o.groupId); err != nil {
		return errors.WrapIf(err, "couldn't set \"groupId\" field")
	}

	groupStateField := fields.String{Context: describedGroupGroupState}
	if err := groupStateField.Read(buf, version, &o.groupState); err != nil {
		return errors.WrapIf(err, "couldn't set \"groupState\" field")
	}

	protocolTypeField := fields.String{Context: describedGroupProtocolType}
	if err := protocolTypeField.Read(buf, version, &o.protocolType); err != nil {
		return errors.WrapIf(err, "couldn't set \"protocolType\" field")
	}

	protocolDataField := fields.String{Context: describedGroupProtocolData}
	if err := protocolDataField.Read(buf, version, &o.protocolData); err != nil {
		return errors.WrapIf(err, "couldn't set \"protocolData\" field")
	}

	membersField := fields.ArrayOfStruct[describedgroup.DescribedGroupMember, *describedgroup.DescribedGroupMember]{Context: describedGroupMembers}
	members, err := membersField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"members\" field")
	}
	o.members = members

	authorizedOperationsField := fields.Int32{Context: describedGroupAuthorizedOperations}
	if err := authorizedOperationsField.Read(buf, version, &o.authorizedOperations); err != nil {
		return errors.WrapIf(err, "couldn't set \"authorizedOperations\" field")
	}

	// process tagged fields

	if version < DescribedGroupLowestSupportedFlexVersion() || version > DescribedGroupHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	o.unknownTaggedFields = rawTaggedFields

	o.isNil = false
	return nil
}

func (o *DescribedGroup) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	errorCodeField := fields.Int16{Context: describedGroupErrorCode}
	if err := errorCodeField.Write(buf, version, o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"errorCode\" field")
	}
	groupIdField := fields.String{Context: describedGroupGroupId}
	if err := groupIdField.Write(buf, version, o.groupId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"groupId\" field")
	}
	groupStateField := fields.String{Context: describedGroupGroupState}
	if err := groupStateField.Write(buf, version, o.groupState); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"groupState\" field")
	}
	protocolTypeField := fields.String{Context: describedGroupProtocolType}
	if err := protocolTypeField.Write(buf, version, o.protocolType); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"protocolType\" field")
	}
	protocolDataField := fields.String{Context: describedGroupProtocolData}
	if err := protocolDataField.Write(buf, version, o.protocolData); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"protocolData\" field")
	}

	membersField := fields.ArrayOfStruct[describedgroup.DescribedGroupMember, *describedgroup.DescribedGroupMember]{Context: describedGroupMembers}
	if err := membersField.Write(buf, version, o.members); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"members\" field")
	}

	authorizedOperationsField := fields.Int32{Context: describedGroupAuthorizedOperations}
	if err := authorizedOperationsField.Write(buf, version, o.authorizedOperations); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"authorizedOperations\" field")
	}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < DescribedGroupLowestSupportedFlexVersion() || version > DescribedGroupHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *DescribedGroup) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *DescribedGroup) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 8)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.errorCode); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"errorCode\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.groupId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"groupId\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.groupState); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"groupState\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.protocolType); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"protocolType\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.protocolData); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"protocolData\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayOfStructMarshalJSON("members", o.members); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.authorizedOperations); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"authorizedOperations\""), b}, []byte(": ")))
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *DescribedGroup) IsNil() bool {
	return o.isNil
}

func (o *DescribedGroup) Clear() {
	o.Release()
	o.isNil = true

	o.members = nil
	o.unknownTaggedFields = nil
}

func (o *DescribedGroup) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.errorCode = 0
	o.groupId.SetValue("")
	o.groupState.SetValue("")
	o.protocolType.SetValue("")
	o.protocolData.SetValue("")
	for i := range o.members {
		o.members[i].Release()
	}
	o.members = nil
	o.authorizedOperations = -2147483648

	o.isNil = false
}

func (o *DescribedGroup) Equal(that *DescribedGroup) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if o.errorCode != that.errorCode {
		return false
	}
	if !o.groupId.Equal(&that.groupId) {
		return false
	}
	if !o.groupState.Equal(&that.groupState) {
		return false
	}
	if !o.protocolType.Equal(&that.protocolType) {
		return false
	}
	if !o.protocolData.Equal(&that.protocolData) {
		return false
	}
	if len(o.members) != len(that.members) {
		return false
	}
	for i := range o.members {
		if !o.members[i].Equal(&that.members[i]) {
			return false
		}
	}
	if o.authorizedOperations != that.authorizedOperations {
		return false
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *DescribedGroup) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	errorCodeField := fields.Int16{Context: describedGroupErrorCode}
	fieldSize, err = errorCodeField.SizeInBytes(version, o.errorCode)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"errorCode\" field")
	}
	size += fieldSize

	groupIdField := fields.String{Context: describedGroupGroupId}
	fieldSize, err = groupIdField.SizeInBytes(version, o.groupId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"groupId\" field")
	}
	size += fieldSize

	groupStateField := fields.String{Context: describedGroupGroupState}
	fieldSize, err = groupStateField.SizeInBytes(version, o.groupState)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"groupState\" field")
	}
	size += fieldSize

	protocolTypeField := fields.String{Context: describedGroupProtocolType}
	fieldSize, err = protocolTypeField.SizeInBytes(version, o.protocolType)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"protocolType\" field")
	}
	size += fieldSize

	protocolDataField := fields.String{Context: describedGroupProtocolData}
	fieldSize, err = protocolDataField.SizeInBytes(version, o.protocolData)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"protocolData\" field")
	}
	size += fieldSize

	membersField := fields.ArrayOfStruct[describedgroup.DescribedGroupMember, *describedgroup.DescribedGroupMember]{Context: describedGroupMembers}
	fieldSize, err = membersField.SizeInBytes(version, o.members)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"members\" field")
	}
	size += fieldSize

	authorizedOperationsField := fields.Int32{Context: describedGroupAuthorizedOperations}
	fieldSize, err = authorizedOperationsField.SizeInBytes(version, o.authorizedOperations)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"authorizedOperations\" field")
	}
	size += fieldSize

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < DescribedGroupLowestSupportedFlexVersion() || version > DescribedGroupHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *DescribedGroup) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	o.groupId.Release()
	o.groupState.Release()
	o.protocolType.Release()
	o.protocolData.Release()
	for i := range o.members {
		o.members[i].Release()
	}
	o.members = nil
}

func (o *DescribedGroup) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *DescribedGroup) validateNonIgnorableFields(version int16) error {
	if !describedGroupAuthorizedOperations.IsSupportedVersion(version) {
		if o.authorizedOperations != -2147483648 {
			return errors.New(strings.Join([]string{"attempted to write non-default \"authorizedOperations\" at version", strconv.Itoa(int(version))}, " "))
		}
	}
	return nil
}

func DescribedGroupLowestSupportedVersion() int16 {
	return 0
}

func DescribedGroupHighestSupportedVersion() int16 {
	return 32767
}

func DescribedGroupLowestSupportedFlexVersion() int16 {
	return 5
}

func DescribedGroupHighestSupportedFlexVersion() int16 {
	return 32767
}

func DescribedGroupDefault() DescribedGroup {
	var d DescribedGroup
	d.SetDefault()

	return d
}
