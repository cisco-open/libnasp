// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package joingroup

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/messages/joingroup/response"
	typesbytes "github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var responseThrottleTimeMs = fields.Context{
	SpecName:                    "ThrottleTimeMs",
	LowestSupportedVersion:      2,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var responseErrorCode = fields.Context{
	SpecName:                    "ErrorCode",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var responseGenerationId = fields.Context{
	SpecName:                    "GenerationId",
	CustomDefaultValue:          int32(-1),
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var responseProtocolType = fields.Context{
	SpecName:           "ProtocolType",
	CustomDefaultValue: "null",

	LowestSupportedVersion:          7,
	HighestSupportedVersion:         32767,
	LowestSupportedFlexVersion:      6,
	HighestSupportedFlexVersion:     32767,
	LowestSupportedNullableVersion:  7,
	HighestSupportedNullableVersion: 32767,
}
var responseProtocolName = fields.Context{
	SpecName:                        "ProtocolName",
	LowestSupportedVersion:          0,
	HighestSupportedVersion:         32767,
	LowestSupportedFlexVersion:      6,
	HighestSupportedFlexVersion:     32767,
	LowestSupportedNullableVersion:  7,
	HighestSupportedNullableVersion: 32767,
}
var responseLeader = fields.Context{
	SpecName:                    "Leader",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var responseSkipAssignment = fields.Context{
	SpecName:                    "SkipAssignment",
	LowestSupportedVersion:      9,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var responseMemberId = fields.Context{
	SpecName:                    "MemberId",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var responseMembers = fields.Context{
	SpecName:                    "Members",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}

type Response struct {
	members             []response.JoinGroupResponseMember
	unknownTaggedFields []fields.RawTaggedField
	protocolType        fields.NullableString
	protocolName        fields.NullableString
	leader              fields.NullableString
	memberId            fields.NullableString
	throttleTimeMs      int32
	generationId        int32
	errorCode           int16
	skipAssignment      bool
	isNil               bool
}

func (o *Response) ThrottleTimeMs() int32 {
	return o.throttleTimeMs
}

func (o *Response) SetThrottleTimeMs(val int32) {
	o.isNil = false
	o.throttleTimeMs = val
}

func (o *Response) ErrorCode() int16 {
	return o.errorCode
}

func (o *Response) SetErrorCode(val int16) {
	o.isNil = false
	o.errorCode = val
}

func (o *Response) GenerationId() int32 {
	return o.generationId
}

func (o *Response) SetGenerationId(val int32) {
	o.isNil = false
	o.generationId = val
}

func (o *Response) ProtocolType() fields.NullableString {
	return o.protocolType
}

func (o *Response) SetProtocolType(val fields.NullableString) {
	o.isNil = false
	o.protocolType = val
}

func (o *Response) ProtocolName() fields.NullableString {
	return o.protocolName
}

func (o *Response) SetProtocolName(val fields.NullableString) {
	o.isNil = false
	o.protocolName = val
}

func (o *Response) Leader() fields.NullableString {
	return o.leader
}

func (o *Response) SetLeader(val fields.NullableString) {
	o.isNil = false
	o.leader = val
}

func (o *Response) SkipAssignment() bool {
	return o.skipAssignment
}

func (o *Response) SetSkipAssignment(val bool) {
	o.isNil = false
	o.skipAssignment = val
}

func (o *Response) MemberId() fields.NullableString {
	return o.memberId
}

func (o *Response) SetMemberId(val fields.NullableString) {
	o.isNil = false
	o.memberId = val
}

func (o *Response) Members() []response.JoinGroupResponseMember {
	return o.members
}

func (o *Response) SetMembers(val []response.JoinGroupResponseMember) {
	o.isNil = false
	o.members = val
}

func (o *Response) ApiKey() int16 {
	return 11
}

func (o *Response) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *Response) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *Response) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	throttleTimeMsField := fields.Int32{Context: responseThrottleTimeMs}
	if err := throttleTimeMsField.Read(buf, version, &o.throttleTimeMs); err != nil {
		return errors.WrapIf(err, "couldn't set \"throttleTimeMs\" field")
	}

	errorCodeField := fields.Int16{Context: responseErrorCode}
	if err := errorCodeField.Read(buf, version, &o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't set \"errorCode\" field")
	}

	generationIdField := fields.Int32{Context: responseGenerationId}
	if err := generationIdField.Read(buf, version, &o.generationId); err != nil {
		return errors.WrapIf(err, "couldn't set \"generationId\" field")
	}

	protocolTypeField := fields.String{Context: responseProtocolType}
	if err := protocolTypeField.Read(buf, version, &o.protocolType); err != nil {
		return errors.WrapIf(err, "couldn't set \"protocolType\" field")
	}

	protocolNameField := fields.String{Context: responseProtocolName}
	if err := protocolNameField.Read(buf, version, &o.protocolName); err != nil {
		return errors.WrapIf(err, "couldn't set \"protocolName\" field")
	}

	leaderField := fields.String{Context: responseLeader}
	if err := leaderField.Read(buf, version, &o.leader); err != nil {
		return errors.WrapIf(err, "couldn't set \"leader\" field")
	}

	skipAssignmentField := fields.Bool{Context: responseSkipAssignment}
	if err := skipAssignmentField.Read(buf, version, &o.skipAssignment); err != nil {
		return errors.WrapIf(err, "couldn't set \"skipAssignment\" field")
	}

	memberIdField := fields.String{Context: responseMemberId}
	if err := memberIdField.Read(buf, version, &o.memberId); err != nil {
		return errors.WrapIf(err, "couldn't set \"memberId\" field")
	}

	membersField := fields.ArrayOfStruct[response.JoinGroupResponseMember, *response.JoinGroupResponseMember]{Context: responseMembers}
	members, err := membersField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"members\" field")
	}
	o.members = members

	// process tagged fields

	if version < ResponseLowestSupportedFlexVersion() || version > ResponseHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	o.unknownTaggedFields = rawTaggedFields

	o.isNil = false
	return nil
}

func (o *Response) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	throttleTimeMsField := fields.Int32{Context: responseThrottleTimeMs}
	if err := throttleTimeMsField.Write(buf, version, o.throttleTimeMs); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"throttleTimeMs\" field")
	}
	errorCodeField := fields.Int16{Context: responseErrorCode}
	if err := errorCodeField.Write(buf, version, o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"errorCode\" field")
	}
	generationIdField := fields.Int32{Context: responseGenerationId}
	if err := generationIdField.Write(buf, version, o.generationId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"generationId\" field")
	}
	protocolTypeField := fields.String{Context: responseProtocolType}
	if err := protocolTypeField.Write(buf, version, o.protocolType); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"protocolType\" field")
	}
	protocolNameField := fields.String{Context: responseProtocolName}
	if err := protocolNameField.Write(buf, version, o.protocolName); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"protocolName\" field")
	}
	leaderField := fields.String{Context: responseLeader}
	if err := leaderField.Write(buf, version, o.leader); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"leader\" field")
	}
	skipAssignmentField := fields.Bool{Context: responseSkipAssignment}
	if err := skipAssignmentField.Write(buf, version, o.skipAssignment); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"skipAssignment\" field")
	}
	memberIdField := fields.String{Context: responseMemberId}
	if err := memberIdField.Write(buf, version, o.memberId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"memberId\" field")
	}

	membersField := fields.ArrayOfStruct[response.JoinGroupResponseMember, *response.JoinGroupResponseMember]{Context: responseMembers}
	if err := membersField.Write(buf, version, o.members); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"members\" field")
	}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < ResponseLowestSupportedFlexVersion() || version > ResponseHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *Response) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *Response) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 10)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.throttleTimeMs); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"throttleTimeMs\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.errorCode); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"errorCode\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.generationId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"generationId\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.protocolType); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"protocolType\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.protocolName); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"protocolName\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.leader); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"leader\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.skipAssignment); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"skipAssignment\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.memberId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"memberId\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayOfStructMarshalJSON("members", o.members); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *Response) IsNil() bool {
	return o.isNil
}

func (o *Response) Clear() {
	o.Release()
	o.isNil = true

	o.members = nil
	o.unknownTaggedFields = nil
}

func (o *Response) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.throttleTimeMs = 0
	o.errorCode = 0
	o.generationId = -1
	o.protocolType.SetValue("null")
	o.protocolName.SetValue("")
	o.leader.SetValue("")
	o.skipAssignment = false
	o.memberId.SetValue("")
	for i := range o.members {
		o.members[i].Release()
	}
	o.members = nil

	o.isNil = false
}

func (o *Response) Equal(that *Response) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if o.throttleTimeMs != that.throttleTimeMs {
		return false
	}
	if o.errorCode != that.errorCode {
		return false
	}
	if o.generationId != that.generationId {
		return false
	}
	if !o.protocolType.Equal(&that.protocolType) {
		return false
	}
	if !o.protocolName.Equal(&that.protocolName) {
		return false
	}
	if !o.leader.Equal(&that.leader) {
		return false
	}
	if o.skipAssignment != that.skipAssignment {
		return false
	}
	if !o.memberId.Equal(&that.memberId) {
		return false
	}
	if len(o.members) != len(that.members) {
		return false
	}
	for i := range o.members {
		if !o.members[i].Equal(&that.members[i]) {
			return false
		}
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *Response) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	throttleTimeMsField := fields.Int32{Context: responseThrottleTimeMs}
	fieldSize, err = throttleTimeMsField.SizeInBytes(version, o.throttleTimeMs)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"throttleTimeMs\" field")
	}
	size += fieldSize

	errorCodeField := fields.Int16{Context: responseErrorCode}
	fieldSize, err = errorCodeField.SizeInBytes(version, o.errorCode)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"errorCode\" field")
	}
	size += fieldSize

	generationIdField := fields.Int32{Context: responseGenerationId}
	fieldSize, err = generationIdField.SizeInBytes(version, o.generationId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"generationId\" field")
	}
	size += fieldSize

	protocolTypeField := fields.String{Context: responseProtocolType}
	fieldSize, err = protocolTypeField.SizeInBytes(version, o.protocolType)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"protocolType\" field")
	}
	size += fieldSize

	protocolNameField := fields.String{Context: responseProtocolName}
	fieldSize, err = protocolNameField.SizeInBytes(version, o.protocolName)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"protocolName\" field")
	}
	size += fieldSize

	leaderField := fields.String{Context: responseLeader}
	fieldSize, err = leaderField.SizeInBytes(version, o.leader)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"leader\" field")
	}
	size += fieldSize

	skipAssignmentField := fields.Bool{Context: responseSkipAssignment}
	fieldSize, err = skipAssignmentField.SizeInBytes(version, o.skipAssignment)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"skipAssignment\" field")
	}
	size += fieldSize

	memberIdField := fields.String{Context: responseMemberId}
	fieldSize, err = memberIdField.SizeInBytes(version, o.memberId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"memberId\" field")
	}
	size += fieldSize

	membersField := fields.ArrayOfStruct[response.JoinGroupResponseMember, *response.JoinGroupResponseMember]{Context: responseMembers}
	fieldSize, err = membersField.SizeInBytes(version, o.members)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"members\" field")
	}
	size += fieldSize

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < ResponseLowestSupportedFlexVersion() || version > ResponseHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *Response) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	o.protocolType.Release()
	o.protocolName.Release()
	o.leader.Release()
	o.memberId.Release()
	for i := range o.members {
		o.members[i].Release()
	}
	o.members = nil
}

func (o *Response) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *Response) validateNonIgnorableFields(version int16) error {
	if !responseSkipAssignment.IsSupportedVersion(version) {
		if o.skipAssignment {
			return errors.New(strings.Join([]string{"attempted to write non-default \"skipAssignment\" at version", strconv.Itoa(int(version))}, " "))
		}
	}
	return nil
}

func ResponseLowestSupportedVersion() int16 {
	return 0
}

func ResponseHighestSupportedVersion() int16 {
	return 9
}

func ResponseLowestSupportedFlexVersion() int16 {
	return 6
}

func ResponseHighestSupportedFlexVersion() int16 {
	return 32767
}

func ResponseDefault() Response {
	var d Response
	d.SetDefault()

	return d
}
