// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package fetch

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/messages/fetch/request"
	typesbytes "github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var requestClusterId = fields.Context{
	SpecName:           "ClusterId",
	SpecTag:            fields.Tag(0),
	CustomDefaultValue: "null",

	LowestSupportedVersion:          12,
	HighestSupportedVersion:         32767,
	LowestSupportedFlexVersion:      12,
	HighestSupportedFlexVersion:     32767,
	LowestSupportedNullableVersion:  12,
	HighestSupportedNullableVersion: 32767,
	LowestSupportedTaggedVersion:    12,
	HighestSupportedTaggedVersion:   32767,
}
var requestReplicaId = fields.Context{
	SpecName:                    "ReplicaId",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}
var requestMaxWaitMs = fields.Context{
	SpecName:                    "MaxWaitMs",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}
var requestMinBytes = fields.Context{
	SpecName:                    "MinBytes",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}
var requestMaxBytes = fields.Context{
	SpecName:                    "MaxBytes",
	CustomDefaultValue:          int32(2147483647),
	LowestSupportedVersion:      3,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}
var requestIsolationLevel = fields.Context{
	SpecName:                    "IsolationLevel",
	LowestSupportedVersion:      4,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}
var requestSessionId = fields.Context{
	SpecName:                    "SessionId",
	LowestSupportedVersion:      7,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}
var requestSessionEpoch = fields.Context{
	SpecName:                    "SessionEpoch",
	CustomDefaultValue:          int32(-1),
	LowestSupportedVersion:      7,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}
var requestTopics = fields.Context{
	SpecName:                    "Topics",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}
var requestForgottenTopicsData = fields.Context{
	SpecName:                    "ForgottenTopicsData",
	LowestSupportedVersion:      7,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}
var requestRackId = fields.Context{
	SpecName:                    "RackId",
	LowestSupportedVersion:      11,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  12,
	HighestSupportedFlexVersion: 32767,
}

type Request struct {
	topics              []request.FetchTopic
	unknownTaggedFields []fields.RawTaggedField
	forgottenTopicsData []request.ForgottenTopic
	rackId              fields.NullableString
	clusterId           fields.NullableString
	minBytes            int32
	sessionId           int32
	sessionEpoch        int32
	maxBytes            int32
	maxWaitMs           int32
	replicaId           int32
	isolationLevel      int8
	isNil               bool
}

func (o *Request) ClusterId() fields.NullableString {
	return o.clusterId
}

func (o *Request) SetClusterId(val fields.NullableString) {
	o.isNil = false
	o.clusterId = val
}

func (o *Request) ReplicaId() int32 {
	return o.replicaId
}

func (o *Request) SetReplicaId(val int32) {
	o.isNil = false
	o.replicaId = val
}

func (o *Request) MaxWaitMs() int32 {
	return o.maxWaitMs
}

func (o *Request) SetMaxWaitMs(val int32) {
	o.isNil = false
	o.maxWaitMs = val
}

func (o *Request) MinBytes() int32 {
	return o.minBytes
}

func (o *Request) SetMinBytes(val int32) {
	o.isNil = false
	o.minBytes = val
}

func (o *Request) MaxBytes() int32 {
	return o.maxBytes
}

func (o *Request) SetMaxBytes(val int32) {
	o.isNil = false
	o.maxBytes = val
}

func (o *Request) IsolationLevel() int8 {
	return o.isolationLevel
}

func (o *Request) SetIsolationLevel(val int8) {
	o.isNil = false
	o.isolationLevel = val
}

func (o *Request) SessionId() int32 {
	return o.sessionId
}

func (o *Request) SetSessionId(val int32) {
	o.isNil = false
	o.sessionId = val
}

func (o *Request) SessionEpoch() int32 {
	return o.sessionEpoch
}

func (o *Request) SetSessionEpoch(val int32) {
	o.isNil = false
	o.sessionEpoch = val
}

func (o *Request) Topics() []request.FetchTopic {
	return o.topics
}

func (o *Request) SetTopics(val []request.FetchTopic) {
	o.isNil = false
	o.topics = val
}

func (o *Request) ForgottenTopicsData() []request.ForgottenTopic {
	return o.forgottenTopicsData
}

func (o *Request) SetForgottenTopicsData(val []request.ForgottenTopic) {
	o.isNil = false
	o.forgottenTopicsData = val
}

func (o *Request) RackId() fields.NullableString {
	return o.rackId
}

func (o *Request) SetRackId(val fields.NullableString) {
	o.isNil = false
	o.rackId = val
}

func (o *Request) ApiKey() int16 {
	return 1
}

func (o *Request) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *Request) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *Request) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	replicaIdField := fields.Int32{Context: requestReplicaId}
	if err := replicaIdField.Read(buf, version, &o.replicaId); err != nil {
		return errors.WrapIf(err, "couldn't set \"replicaId\" field")
	}

	maxWaitMsField := fields.Int32{Context: requestMaxWaitMs}
	if err := maxWaitMsField.Read(buf, version, &o.maxWaitMs); err != nil {
		return errors.WrapIf(err, "couldn't set \"maxWaitMs\" field")
	}

	minBytesField := fields.Int32{Context: requestMinBytes}
	if err := minBytesField.Read(buf, version, &o.minBytes); err != nil {
		return errors.WrapIf(err, "couldn't set \"minBytes\" field")
	}

	maxBytesField := fields.Int32{Context: requestMaxBytes}
	if err := maxBytesField.Read(buf, version, &o.maxBytes); err != nil {
		return errors.WrapIf(err, "couldn't set \"maxBytes\" field")
	}

	isolationLevelField := fields.Int8{Context: requestIsolationLevel}
	if err := isolationLevelField.Read(buf, version, &o.isolationLevel); err != nil {
		return errors.WrapIf(err, "couldn't set \"isolationLevel\" field")
	}

	sessionIdField := fields.Int32{Context: requestSessionId}
	if err := sessionIdField.Read(buf, version, &o.sessionId); err != nil {
		return errors.WrapIf(err, "couldn't set \"sessionId\" field")
	}

	sessionEpochField := fields.Int32{Context: requestSessionEpoch}
	if err := sessionEpochField.Read(buf, version, &o.sessionEpoch); err != nil {
		return errors.WrapIf(err, "couldn't set \"sessionEpoch\" field")
	}

	topicsField := fields.ArrayOfStruct[request.FetchTopic, *request.FetchTopic]{Context: requestTopics}
	topics, err := topicsField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"topics\" field")
	}
	o.topics = topics

	forgottenTopicsDataField := fields.ArrayOfStruct[request.ForgottenTopic, *request.ForgottenTopic]{Context: requestForgottenTopicsData}
	forgottenTopicsData, err := forgottenTopicsDataField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"forgottenTopicsData\" field")
	}
	o.forgottenTopicsData = forgottenTopicsData

	rackIdField := fields.String{Context: requestRackId}
	if err := rackIdField.Read(buf, version, &o.rackId); err != nil {
		return errors.WrapIf(err, "couldn't set \"rackId\" field")
	}

	// process tagged fields

	if version < RequestLowestSupportedFlexVersion() || version > RequestHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	clusterIdField := fields.String{Context: requestClusterId}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	for i := range rawTaggedFields {
		switch rawTaggedFields[i].Tag() {
		case 0:
			if !requestClusterId.IsTaggedVersion(version) {
				return errors.New(strings.Join([]string{"tagged field \"clusterId\" is not supported by version", strconv.Itoa(int(version))}, " "))
			}
			if err := clusterIdField.Read(bytes.NewReader(rawTaggedFields[i].Value()), version, &o.clusterId); err != nil {
				return errors.WrapIf(err, "couldn't set \"clusterId\" field")
			}
			rawTaggedFields[i].Release()
		default:
			o.unknownTaggedFields = append(o.unknownTaggedFields, rawTaggedFields[i])
		}
	}

	o.isNil = false
	return nil
}

func (o *Request) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	clusterIdField := fields.String{Context: requestClusterId}
	replicaIdField := fields.Int32{Context: requestReplicaId}
	if err := replicaIdField.Write(buf, version, o.replicaId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"replicaId\" field")
	}
	maxWaitMsField := fields.Int32{Context: requestMaxWaitMs}
	if err := maxWaitMsField.Write(buf, version, o.maxWaitMs); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"maxWaitMs\" field")
	}
	minBytesField := fields.Int32{Context: requestMinBytes}
	if err := minBytesField.Write(buf, version, o.minBytes); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"minBytes\" field")
	}
	maxBytesField := fields.Int32{Context: requestMaxBytes}
	if err := maxBytesField.Write(buf, version, o.maxBytes); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"maxBytes\" field")
	}
	isolationLevelField := fields.Int8{Context: requestIsolationLevel}
	if err := isolationLevelField.Write(buf, version, o.isolationLevel); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"isolationLevel\" field")
	}
	sessionIdField := fields.Int32{Context: requestSessionId}
	if err := sessionIdField.Write(buf, version, o.sessionId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"sessionId\" field")
	}
	sessionEpochField := fields.Int32{Context: requestSessionEpoch}
	if err := sessionEpochField.Write(buf, version, o.sessionEpoch); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"sessionEpoch\" field")
	}

	topicsField := fields.ArrayOfStruct[request.FetchTopic, *request.FetchTopic]{Context: requestTopics}
	if err := topicsField.Write(buf, version, o.topics); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"topics\" field")
	}

	forgottenTopicsDataField := fields.ArrayOfStruct[request.ForgottenTopic, *request.ForgottenTopic]{Context: requestForgottenTopicsData}
	if err := forgottenTopicsDataField.Write(buf, version, o.forgottenTopicsData); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"forgottenTopicsData\" field")
	}

	rackIdField := fields.String{Context: requestRackId}
	if err := rackIdField.Write(buf, version, o.rackId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"rackId\" field")
	}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < RequestLowestSupportedFlexVersion() || version > RequestHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)
	var taggedField fields.RawTaggedField

	if requestClusterId.IsTaggedVersion(version) && !o.clusterId.IsNil() {
		size, err := clusterIdField.SizeInBytes(version, o.clusterId)
		if err != nil {
			return errors.WrapIf(err, "couldn't determine \"clusterId\" field size in bytes")
		}
		w := typesbytes.NewSliceWriter(make([]byte, 0, size))
		if err := clusterIdField.Write(&w, version, o.clusterId); err != nil {
			return errors.WrapIf(err, "couldn't serialize \"clusterId\" field")
		}
		taggedField.SetTag(0)
		taggedField.SetValue(w.Bytes())
		rawTaggedFields = append(rawTaggedFields, taggedField)
	}

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *Request) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *Request) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 12)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.clusterId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"clusterId\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.replicaId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"replicaId\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.maxWaitMs); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"maxWaitMs\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.minBytes); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"minBytes\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.maxBytes); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"maxBytes\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.isolationLevel); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"isolationLevel\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.sessionId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"sessionId\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.sessionEpoch); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"sessionEpoch\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayOfStructMarshalJSON("topics", o.topics); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.ArrayOfStructMarshalJSON("forgottenTopicsData", o.forgottenTopicsData); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.rackId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"rackId\""), b}, []byte(": ")))
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *Request) IsNil() bool {
	return o.isNil
}

func (o *Request) Clear() {
	o.Release()
	o.isNil = true

	o.topics = nil
	o.forgottenTopicsData = nil
	o.unknownTaggedFields = nil
}

func (o *Request) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.clusterId.SetValue("null")
	o.replicaId = 0
	o.maxWaitMs = 0
	o.minBytes = 0
	o.maxBytes = 2147483647
	o.isolationLevel = 0
	o.sessionId = 0
	o.sessionEpoch = -1
	for i := range o.topics {
		o.topics[i].Release()
	}
	o.topics = nil
	for i := range o.forgottenTopicsData {
		o.forgottenTopicsData[i].Release()
	}
	o.forgottenTopicsData = nil
	o.rackId.SetValue("")

	o.isNil = false
}

func (o *Request) Equal(that *Request) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if !o.clusterId.Equal(&that.clusterId) {
		return false
	}
	if o.replicaId != that.replicaId {
		return false
	}
	if o.maxWaitMs != that.maxWaitMs {
		return false
	}
	if o.minBytes != that.minBytes {
		return false
	}
	if o.maxBytes != that.maxBytes {
		return false
	}
	if o.isolationLevel != that.isolationLevel {
		return false
	}
	if o.sessionId != that.sessionId {
		return false
	}
	if o.sessionEpoch != that.sessionEpoch {
		return false
	}
	if len(o.topics) != len(that.topics) {
		return false
	}
	for i := range o.topics {
		if !o.topics[i].Equal(&that.topics[i]) {
			return false
		}
	}
	if len(o.forgottenTopicsData) != len(that.forgottenTopicsData) {
		return false
	}
	for i := range o.forgottenTopicsData {
		if !o.forgottenTopicsData[i].Equal(&that.forgottenTopicsData[i]) {
			return false
		}
	}
	if !o.rackId.Equal(&that.rackId) {
		return false
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *Request) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	clusterIdField := fields.String{Context: requestClusterId}

	replicaIdField := fields.Int32{Context: requestReplicaId}
	fieldSize, err = replicaIdField.SizeInBytes(version, o.replicaId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"replicaId\" field")
	}
	size += fieldSize

	maxWaitMsField := fields.Int32{Context: requestMaxWaitMs}
	fieldSize, err = maxWaitMsField.SizeInBytes(version, o.maxWaitMs)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"maxWaitMs\" field")
	}
	size += fieldSize

	minBytesField := fields.Int32{Context: requestMinBytes}
	fieldSize, err = minBytesField.SizeInBytes(version, o.minBytes)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"minBytes\" field")
	}
	size += fieldSize

	maxBytesField := fields.Int32{Context: requestMaxBytes}
	fieldSize, err = maxBytesField.SizeInBytes(version, o.maxBytes)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"maxBytes\" field")
	}
	size += fieldSize

	isolationLevelField := fields.Int8{Context: requestIsolationLevel}
	fieldSize, err = isolationLevelField.SizeInBytes(version, o.isolationLevel)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"isolationLevel\" field")
	}
	size += fieldSize

	sessionIdField := fields.Int32{Context: requestSessionId}
	fieldSize, err = sessionIdField.SizeInBytes(version, o.sessionId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"sessionId\" field")
	}
	size += fieldSize

	sessionEpochField := fields.Int32{Context: requestSessionEpoch}
	fieldSize, err = sessionEpochField.SizeInBytes(version, o.sessionEpoch)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"sessionEpoch\" field")
	}
	size += fieldSize

	topicsField := fields.ArrayOfStruct[request.FetchTopic, *request.FetchTopic]{Context: requestTopics}
	fieldSize, err = topicsField.SizeInBytes(version, o.topics)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"topics\" field")
	}
	size += fieldSize

	forgottenTopicsDataField := fields.ArrayOfStruct[request.ForgottenTopic, *request.ForgottenTopic]{Context: requestForgottenTopicsData}
	fieldSize, err = forgottenTopicsDataField.SizeInBytes(version, o.forgottenTopicsData)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"forgottenTopicsData\" field")
	}
	size += fieldSize

	rackIdField := fields.String{Context: requestRackId}
	fieldSize, err = rackIdField.SizeInBytes(version, o.rackId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"rackId\" field")
	}
	size += fieldSize

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < RequestLowestSupportedFlexVersion() || version > RequestHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields
	fieldSize = 0

	if requestClusterId.IsTaggedVersion(version) && !o.clusterId.IsNil() {
		fieldSize, err = clusterIdField.SizeInBytes(version, o.clusterId)
		if err != nil {
			return 0, errors.WrapIf(err, "couldn't compute size of \"clusterId\" field")
		}
		if int64(fieldSize) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid \"clusterId\" tagged field value length:", strconv.Itoa(fieldSize)}, " "))
		}
		fieldSize += varint.Uint32Size(uint32(fieldSize)) // bytes for serializing the length of the "clusterId" field
		fieldSize += varint.Uint32Size(0)                 // bytes for serializing the tag of the "clusterId" field
		taggedFieldsSize += fieldSize
	}

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *Request) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	o.clusterId.Release()
	for i := range o.topics {
		o.topics[i].Release()
	}
	o.topics = nil
	for i := range o.forgottenTopicsData {
		o.forgottenTopicsData[i].Release()
	}
	o.forgottenTopicsData = nil
	o.rackId.Release()
}

func (o *Request) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	if requestClusterId.IsTaggedVersion(version) && !o.clusterId.IsNil() {
		numTaggedFields++
	}

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *Request) validateNonIgnorableFields(version int16) error {
	if !requestForgottenTopicsData.IsSupportedVersion(version) {
		if len(o.forgottenTopicsData) > 0 {
			return errors.New(strings.Join([]string{"attempted to write non-default \"forgottenTopicsData\" at version", strconv.Itoa(int(version))}, " "))
		}
	}
	return nil
}

func RequestLowestSupportedVersion() int16 {
	return 0
}

func RequestHighestSupportedVersion() int16 {
	return 13
}

func RequestLowestSupportedFlexVersion() int16 {
	return 12
}

func RequestHighestSupportedFlexVersion() int16 {
	return 32767
}

func RequestDefault() Request {
	var d Request
	d.SetDefault()

	return d
}
