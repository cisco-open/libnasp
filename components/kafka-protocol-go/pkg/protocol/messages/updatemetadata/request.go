// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package updatemetadata

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/messages/updatemetadata/common"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/messages/updatemetadata/request"
	typesbytes "github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var requestControllerId = fields.Context{
	SpecName:                    "ControllerId",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var requestIsKRaftController = fields.Context{
	SpecName:                    "isKRaftController",
	LowestSupportedVersion:      8,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var requestControllerEpoch = fields.Context{
	SpecName:                    "ControllerEpoch",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var requestBrokerEpoch = fields.Context{
	SpecName:                    "BrokerEpoch",
	CustomDefaultValue:          int64(-1),
	LowestSupportedVersion:      5,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var requestUngroupedPartitionStates = fields.Context{
	SpecName:                    "UngroupedPartitionStates",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     4,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var requestTopicStates = fields.Context{
	SpecName:                    "TopicStates",
	LowestSupportedVersion:      5,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var requestLiveBrokers = fields.Context{
	SpecName:                    "LiveBrokers",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}

type Request struct {
	ungroupedPartitionStates []common.UpdateMetadataPartitionState
	topicStates              []request.UpdateMetadataTopicState
	liveBrokers              []request.UpdateMetadataBroker
	unknownTaggedFields      []fields.RawTaggedField
	brokerEpoch              int64
	controllerId             int32
	controllerEpoch          int32
	isKRaftController        bool
	isNil                    bool
}

func (o *Request) ControllerId() int32 {
	return o.controllerId
}

func (o *Request) SetControllerId(val int32) {
	o.isNil = false
	o.controllerId = val
}

func (o *Request) IsKRaftController() bool {
	return o.isKRaftController
}

func (o *Request) SetIsKRaftController(val bool) {
	o.isNil = false
	o.isKRaftController = val
}

func (o *Request) ControllerEpoch() int32 {
	return o.controllerEpoch
}

func (o *Request) SetControllerEpoch(val int32) {
	o.isNil = false
	o.controllerEpoch = val
}

func (o *Request) BrokerEpoch() int64 {
	return o.brokerEpoch
}

func (o *Request) SetBrokerEpoch(val int64) {
	o.isNil = false
	o.brokerEpoch = val
}

func (o *Request) UngroupedPartitionStates() []common.UpdateMetadataPartitionState {
	return o.ungroupedPartitionStates
}

func (o *Request) SetUngroupedPartitionStates(val []common.UpdateMetadataPartitionState) {
	o.isNil = false
	o.ungroupedPartitionStates = val
}

func (o *Request) TopicStates() []request.UpdateMetadataTopicState {
	return o.topicStates
}

func (o *Request) SetTopicStates(val []request.UpdateMetadataTopicState) {
	o.isNil = false
	o.topicStates = val
}

func (o *Request) LiveBrokers() []request.UpdateMetadataBroker {
	return o.liveBrokers
}

func (o *Request) SetLiveBrokers(val []request.UpdateMetadataBroker) {
	o.isNil = false
	o.liveBrokers = val
}

func (o *Request) ApiKey() int16 {
	return 6
}

func (o *Request) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *Request) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *Request) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	controllerIdField := fields.Int32{Context: requestControllerId}
	if err := controllerIdField.Read(buf, version, &o.controllerId); err != nil {
		return errors.WrapIf(err, "couldn't set \"controllerId\" field")
	}

	isKRaftControllerField := fields.Bool{Context: requestIsKRaftController}
	if err := isKRaftControllerField.Read(buf, version, &o.isKRaftController); err != nil {
		return errors.WrapIf(err, "couldn't set \"isKRaftController\" field")
	}

	controllerEpochField := fields.Int32{Context: requestControllerEpoch}
	if err := controllerEpochField.Read(buf, version, &o.controllerEpoch); err != nil {
		return errors.WrapIf(err, "couldn't set \"controllerEpoch\" field")
	}

	brokerEpochField := fields.Int64{Context: requestBrokerEpoch}
	if err := brokerEpochField.Read(buf, version, &o.brokerEpoch); err != nil {
		return errors.WrapIf(err, "couldn't set \"brokerEpoch\" field")
	}

	ungroupedPartitionStatesField := fields.ArrayOfStruct[common.UpdateMetadataPartitionState, *common.UpdateMetadataPartitionState]{Context: requestUngroupedPartitionStates}
	ungroupedPartitionStates, err := ungroupedPartitionStatesField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"ungroupedPartitionStates\" field")
	}
	o.ungroupedPartitionStates = ungroupedPartitionStates

	topicStatesField := fields.ArrayOfStruct[request.UpdateMetadataTopicState, *request.UpdateMetadataTopicState]{Context: requestTopicStates}
	topicStates, err := topicStatesField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"topicStates\" field")
	}
	o.topicStates = topicStates

	liveBrokersField := fields.ArrayOfStruct[request.UpdateMetadataBroker, *request.UpdateMetadataBroker]{Context: requestLiveBrokers}
	liveBrokers, err := liveBrokersField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"liveBrokers\" field")
	}
	o.liveBrokers = liveBrokers

	// process tagged fields

	if version < RequestLowestSupportedFlexVersion() || version > RequestHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	o.unknownTaggedFields = rawTaggedFields

	o.isNil = false
	return nil
}

func (o *Request) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	controllerIdField := fields.Int32{Context: requestControllerId}
	if err := controllerIdField.Write(buf, version, o.controllerId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"controllerId\" field")
	}
	isKRaftControllerField := fields.Bool{Context: requestIsKRaftController}
	if err := isKRaftControllerField.Write(buf, version, o.isKRaftController); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"isKRaftController\" field")
	}
	controllerEpochField := fields.Int32{Context: requestControllerEpoch}
	if err := controllerEpochField.Write(buf, version, o.controllerEpoch); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"controllerEpoch\" field")
	}
	brokerEpochField := fields.Int64{Context: requestBrokerEpoch}
	if err := brokerEpochField.Write(buf, version, o.brokerEpoch); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"brokerEpoch\" field")
	}

	ungroupedPartitionStatesField := fields.ArrayOfStruct[common.UpdateMetadataPartitionState, *common.UpdateMetadataPartitionState]{Context: requestUngroupedPartitionStates}
	if err := ungroupedPartitionStatesField.Write(buf, version, o.ungroupedPartitionStates); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"ungroupedPartitionStates\" field")
	}

	topicStatesField := fields.ArrayOfStruct[request.UpdateMetadataTopicState, *request.UpdateMetadataTopicState]{Context: requestTopicStates}
	if err := topicStatesField.Write(buf, version, o.topicStates); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"topicStates\" field")
	}

	liveBrokersField := fields.ArrayOfStruct[request.UpdateMetadataBroker, *request.UpdateMetadataBroker]{Context: requestLiveBrokers}
	if err := liveBrokersField.Write(buf, version, o.liveBrokers); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"liveBrokers\" field")
	}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < RequestLowestSupportedFlexVersion() || version > RequestHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *Request) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *Request) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 8)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.controllerId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"controllerId\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.isKRaftController); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"isKRaftController\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.controllerEpoch); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"controllerEpoch\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.brokerEpoch); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"brokerEpoch\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayOfStructMarshalJSON("ungroupedPartitionStates", o.ungroupedPartitionStates); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.ArrayOfStructMarshalJSON("topicStates", o.topicStates); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.ArrayOfStructMarshalJSON("liveBrokers", o.liveBrokers); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *Request) IsNil() bool {
	return o.isNil
}

func (o *Request) Clear() {
	o.Release()
	o.isNil = true

	o.ungroupedPartitionStates = nil
	o.topicStates = nil
	o.liveBrokers = nil
	o.unknownTaggedFields = nil
}

func (o *Request) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.controllerId = 0
	o.isKRaftController = false
	o.controllerEpoch = 0
	o.brokerEpoch = -1
	for i := range o.ungroupedPartitionStates {
		o.ungroupedPartitionStates[i].Release()
	}
	o.ungroupedPartitionStates = nil
	for i := range o.topicStates {
		o.topicStates[i].Release()
	}
	o.topicStates = nil
	for i := range o.liveBrokers {
		o.liveBrokers[i].Release()
	}
	o.liveBrokers = nil

	o.isNil = false
}

func (o *Request) Equal(that *Request) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if o.controllerId != that.controllerId {
		return false
	}
	if o.isKRaftController != that.isKRaftController {
		return false
	}
	if o.controllerEpoch != that.controllerEpoch {
		return false
	}
	if o.brokerEpoch != that.brokerEpoch {
		return false
	}
	if len(o.ungroupedPartitionStates) != len(that.ungroupedPartitionStates) {
		return false
	}
	for i := range o.ungroupedPartitionStates {
		if !o.ungroupedPartitionStates[i].Equal(&that.ungroupedPartitionStates[i]) {
			return false
		}
	}
	if len(o.topicStates) != len(that.topicStates) {
		return false
	}
	for i := range o.topicStates {
		if !o.topicStates[i].Equal(&that.topicStates[i]) {
			return false
		}
	}
	if len(o.liveBrokers) != len(that.liveBrokers) {
		return false
	}
	for i := range o.liveBrokers {
		if !o.liveBrokers[i].Equal(&that.liveBrokers[i]) {
			return false
		}
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *Request) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	controllerIdField := fields.Int32{Context: requestControllerId}
	fieldSize, err = controllerIdField.SizeInBytes(version, o.controllerId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"controllerId\" field")
	}
	size += fieldSize

	isKRaftControllerField := fields.Bool{Context: requestIsKRaftController}
	fieldSize, err = isKRaftControllerField.SizeInBytes(version, o.isKRaftController)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"isKRaftController\" field")
	}
	size += fieldSize

	controllerEpochField := fields.Int32{Context: requestControllerEpoch}
	fieldSize, err = controllerEpochField.SizeInBytes(version, o.controllerEpoch)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"controllerEpoch\" field")
	}
	size += fieldSize

	brokerEpochField := fields.Int64{Context: requestBrokerEpoch}
	fieldSize, err = brokerEpochField.SizeInBytes(version, o.brokerEpoch)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"brokerEpoch\" field")
	}
	size += fieldSize

	ungroupedPartitionStatesField := fields.ArrayOfStruct[common.UpdateMetadataPartitionState, *common.UpdateMetadataPartitionState]{Context: requestUngroupedPartitionStates}
	fieldSize, err = ungroupedPartitionStatesField.SizeInBytes(version, o.ungroupedPartitionStates)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"ungroupedPartitionStates\" field")
	}
	size += fieldSize

	topicStatesField := fields.ArrayOfStruct[request.UpdateMetadataTopicState, *request.UpdateMetadataTopicState]{Context: requestTopicStates}
	fieldSize, err = topicStatesField.SizeInBytes(version, o.topicStates)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"topicStates\" field")
	}
	size += fieldSize

	liveBrokersField := fields.ArrayOfStruct[request.UpdateMetadataBroker, *request.UpdateMetadataBroker]{Context: requestLiveBrokers}
	fieldSize, err = liveBrokersField.SizeInBytes(version, o.liveBrokers)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"liveBrokers\" field")
	}
	size += fieldSize

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < RequestLowestSupportedFlexVersion() || version > RequestHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *Request) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	for i := range o.ungroupedPartitionStates {
		o.ungroupedPartitionStates[i].Release()
	}
	o.ungroupedPartitionStates = nil
	for i := range o.topicStates {
		o.topicStates[i].Release()
	}
	o.topicStates = nil
	for i := range o.liveBrokers {
		o.liveBrokers[i].Release()
	}
	o.liveBrokers = nil
}

func (o *Request) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *Request) validateNonIgnorableFields(version int16) error {
	if !requestIsKRaftController.IsSupportedVersion(version) {
		if o.isKRaftController {
			return errors.New(strings.Join([]string{"attempted to write non-default \"isKRaftController\" at version", strconv.Itoa(int(version))}, " "))
		}
	}
	if !requestTopicStates.IsSupportedVersion(version) {
		if len(o.topicStates) > 0 {
			return errors.New(strings.Join([]string{"attempted to write non-default \"topicStates\" at version", strconv.Itoa(int(version))}, " "))
		}
	}
	return nil
}

func RequestLowestSupportedVersion() int16 {
	return 0
}

func RequestHighestSupportedVersion() int16 {
	return 8
}

func RequestLowestSupportedFlexVersion() int16 {
	return 6
}

func RequestHighestSupportedFlexVersion() int16 {
	return 32767
}

func RequestDefault() Request {
	var d Request
	d.SetDefault()

	return d
}
