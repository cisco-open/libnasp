// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package common

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	typesbytes "github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var updateMetadataPartitionStateTopicName = fields.Context{
	SpecName:                    "TopicName",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     4,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var updateMetadataPartitionStatePartitionIndex = fields.Context{
	SpecName:                    "PartitionIndex",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var updateMetadataPartitionStateControllerEpoch = fields.Context{
	SpecName:                    "ControllerEpoch",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var updateMetadataPartitionStateLeader = fields.Context{
	SpecName:                    "Leader",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var updateMetadataPartitionStateLeaderEpoch = fields.Context{
	SpecName:                    "LeaderEpoch",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var updateMetadataPartitionStateIsr = fields.Context{
	SpecName:                    "Isr",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var updateMetadataPartitionStateZkVersion = fields.Context{
	SpecName:                    "ZkVersion",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var updateMetadataPartitionStateReplicas = fields.Context{
	SpecName:                    "Replicas",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}
var updateMetadataPartitionStateOfflineReplicas = fields.Context{
	SpecName:                    "OfflineReplicas",
	LowestSupportedVersion:      4,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  6,
	HighestSupportedFlexVersion: 32767,
}

type UpdateMetadataPartitionState struct {
	isr                 []int32
	replicas            []int32
	offlineReplicas     []int32
	unknownTaggedFields []fields.RawTaggedField
	topicName           fields.NullableString
	partitionIndex      int32
	controllerEpoch     int32
	leader              int32
	leaderEpoch         int32
	zkVersion           int32
	isNil               bool
}

func (o *UpdateMetadataPartitionState) TopicName() fields.NullableString {
	return o.topicName
}

func (o *UpdateMetadataPartitionState) SetTopicName(val fields.NullableString) {
	o.isNil = false
	o.topicName = val
}

func (o *UpdateMetadataPartitionState) PartitionIndex() int32 {
	return o.partitionIndex
}

func (o *UpdateMetadataPartitionState) SetPartitionIndex(val int32) {
	o.isNil = false
	o.partitionIndex = val
}

func (o *UpdateMetadataPartitionState) ControllerEpoch() int32 {
	return o.controllerEpoch
}

func (o *UpdateMetadataPartitionState) SetControllerEpoch(val int32) {
	o.isNil = false
	o.controllerEpoch = val
}

func (o *UpdateMetadataPartitionState) Leader() int32 {
	return o.leader
}

func (o *UpdateMetadataPartitionState) SetLeader(val int32) {
	o.isNil = false
	o.leader = val
}

func (o *UpdateMetadataPartitionState) LeaderEpoch() int32 {
	return o.leaderEpoch
}

func (o *UpdateMetadataPartitionState) SetLeaderEpoch(val int32) {
	o.isNil = false
	o.leaderEpoch = val
}

func (o *UpdateMetadataPartitionState) Isr() []int32 {
	return o.isr
}

func (o *UpdateMetadataPartitionState) SetIsr(val []int32) {
	o.isNil = false
	o.isr = val
}

func (o *UpdateMetadataPartitionState) ZkVersion() int32 {
	return o.zkVersion
}

func (o *UpdateMetadataPartitionState) SetZkVersion(val int32) {
	o.isNil = false
	o.zkVersion = val
}

func (o *UpdateMetadataPartitionState) Replicas() []int32 {
	return o.replicas
}

func (o *UpdateMetadataPartitionState) SetReplicas(val []int32) {
	o.isNil = false
	o.replicas = val
}

func (o *UpdateMetadataPartitionState) OfflineReplicas() []int32 {
	return o.offlineReplicas
}

func (o *UpdateMetadataPartitionState) SetOfflineReplicas(val []int32) {
	o.isNil = false
	o.offlineReplicas = val
}

func (o *UpdateMetadataPartitionState) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *UpdateMetadataPartitionState) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *UpdateMetadataPartitionState) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	topicNameField := fields.String{Context: updateMetadataPartitionStateTopicName}
	if err := topicNameField.Read(buf, version, &o.topicName); err != nil {
		return errors.WrapIf(err, "couldn't set \"topicName\" field")
	}

	partitionIndexField := fields.Int32{Context: updateMetadataPartitionStatePartitionIndex}
	if err := partitionIndexField.Read(buf, version, &o.partitionIndex); err != nil {
		return errors.WrapIf(err, "couldn't set \"partitionIndex\" field")
	}

	controllerEpochField := fields.Int32{Context: updateMetadataPartitionStateControllerEpoch}
	if err := controllerEpochField.Read(buf, version, &o.controllerEpoch); err != nil {
		return errors.WrapIf(err, "couldn't set \"controllerEpoch\" field")
	}

	leaderField := fields.Int32{Context: updateMetadataPartitionStateLeader}
	if err := leaderField.Read(buf, version, &o.leader); err != nil {
		return errors.WrapIf(err, "couldn't set \"leader\" field")
	}

	leaderEpochField := fields.Int32{Context: updateMetadataPartitionStateLeaderEpoch}
	if err := leaderEpochField.Read(buf, version, &o.leaderEpoch); err != nil {
		return errors.WrapIf(err, "couldn't set \"leaderEpoch\" field")
	}

	isrField := fields.Array[int32, *fields.Int32]{
		Context:          updateMetadataPartitionStateIsr,
		ElementProcessor: &fields.Int32{Context: updateMetadataPartitionStateIsr}}

	isr, err := isrField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"isr\" field")
	}
	o.isr = isr

	zkVersionField := fields.Int32{Context: updateMetadataPartitionStateZkVersion}
	if err := zkVersionField.Read(buf, version, &o.zkVersion); err != nil {
		return errors.WrapIf(err, "couldn't set \"zkVersion\" field")
	}

	replicasField := fields.Array[int32, *fields.Int32]{
		Context:          updateMetadataPartitionStateReplicas,
		ElementProcessor: &fields.Int32{Context: updateMetadataPartitionStateReplicas}}

	replicas, err := replicasField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"replicas\" field")
	}
	o.replicas = replicas

	offlineReplicasField := fields.Array[int32, *fields.Int32]{
		Context:          updateMetadataPartitionStateOfflineReplicas,
		ElementProcessor: &fields.Int32{Context: updateMetadataPartitionStateOfflineReplicas}}

	offlineReplicas, err := offlineReplicasField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"offlineReplicas\" field")
	}
	o.offlineReplicas = offlineReplicas

	// process tagged fields

	if version < UpdateMetadataPartitionStateLowestSupportedFlexVersion() || version > UpdateMetadataPartitionStateHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	o.unknownTaggedFields = rawTaggedFields

	o.isNil = false
	return nil
}

func (o *UpdateMetadataPartitionState) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	topicNameField := fields.String{Context: updateMetadataPartitionStateTopicName}
	if err := topicNameField.Write(buf, version, o.topicName); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"topicName\" field")
	}
	partitionIndexField := fields.Int32{Context: updateMetadataPartitionStatePartitionIndex}
	if err := partitionIndexField.Write(buf, version, o.partitionIndex); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"partitionIndex\" field")
	}
	controllerEpochField := fields.Int32{Context: updateMetadataPartitionStateControllerEpoch}
	if err := controllerEpochField.Write(buf, version, o.controllerEpoch); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"controllerEpoch\" field")
	}
	leaderField := fields.Int32{Context: updateMetadataPartitionStateLeader}
	if err := leaderField.Write(buf, version, o.leader); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"leader\" field")
	}
	leaderEpochField := fields.Int32{Context: updateMetadataPartitionStateLeaderEpoch}
	if err := leaderEpochField.Write(buf, version, o.leaderEpoch); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"leaderEpoch\" field")
	}
	isrField := fields.Array[int32, *fields.Int32]{
		Context:          updateMetadataPartitionStateIsr,
		ElementProcessor: &fields.Int32{Context: updateMetadataPartitionStateIsr}}
	if err := isrField.Write(buf, version, o.isr); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"isr\" field")
	}

	zkVersionField := fields.Int32{Context: updateMetadataPartitionStateZkVersion}
	if err := zkVersionField.Write(buf, version, o.zkVersion); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"zkVersion\" field")
	}
	replicasField := fields.Array[int32, *fields.Int32]{
		Context:          updateMetadataPartitionStateReplicas,
		ElementProcessor: &fields.Int32{Context: updateMetadataPartitionStateReplicas}}
	if err := replicasField.Write(buf, version, o.replicas); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"replicas\" field")
	}

	offlineReplicasField := fields.Array[int32, *fields.Int32]{
		Context:          updateMetadataPartitionStateOfflineReplicas,
		ElementProcessor: &fields.Int32{Context: updateMetadataPartitionStateOfflineReplicas}}
	if err := offlineReplicasField.Write(buf, version, o.offlineReplicas); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"offlineReplicas\" field")
	}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < UpdateMetadataPartitionStateLowestSupportedFlexVersion() || version > UpdateMetadataPartitionStateHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *UpdateMetadataPartitionState) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *UpdateMetadataPartitionState) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 10)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.topicName); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"topicName\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.partitionIndex); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"partitionIndex\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.controllerEpoch); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"controllerEpoch\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.leader); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"leader\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.leaderEpoch); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"leaderEpoch\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayMarshalJSON("isr", o.isr); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.zkVersion); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"zkVersion\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayMarshalJSON("replicas", o.replicas); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.ArrayMarshalJSON("offlineReplicas", o.offlineReplicas); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *UpdateMetadataPartitionState) IsNil() bool {
	return o.isNil
}

func (o *UpdateMetadataPartitionState) Clear() {
	o.Release()
	o.isNil = true

	o.isr = nil
	o.replicas = nil
	o.offlineReplicas = nil
	o.unknownTaggedFields = nil
}

func (o *UpdateMetadataPartitionState) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.topicName.SetValue("")
	o.partitionIndex = 0
	o.controllerEpoch = 0
	o.leader = 0
	o.leaderEpoch = 0
	o.isr = nil
	o.zkVersion = 0
	o.replicas = nil
	o.offlineReplicas = nil

	o.isNil = false
}

func (o *UpdateMetadataPartitionState) Equal(that *UpdateMetadataPartitionState) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if !o.topicName.Equal(&that.topicName) {
		return false
	}
	if o.partitionIndex != that.partitionIndex {
		return false
	}
	if o.controllerEpoch != that.controllerEpoch {
		return false
	}
	if o.leader != that.leader {
		return false
	}
	if o.leaderEpoch != that.leaderEpoch {
		return false
	}
	if !fields.PrimitiveTypeSliceEqual(o.isr, that.isr) {
		return false
	}
	if o.zkVersion != that.zkVersion {
		return false
	}
	if !fields.PrimitiveTypeSliceEqual(o.replicas, that.replicas) {
		return false
	}
	if !fields.PrimitiveTypeSliceEqual(o.offlineReplicas, that.offlineReplicas) {
		return false
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *UpdateMetadataPartitionState) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	topicNameField := fields.String{Context: updateMetadataPartitionStateTopicName}
	fieldSize, err = topicNameField.SizeInBytes(version, o.topicName)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"topicName\" field")
	}
	size += fieldSize

	partitionIndexField := fields.Int32{Context: updateMetadataPartitionStatePartitionIndex}
	fieldSize, err = partitionIndexField.SizeInBytes(version, o.partitionIndex)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"partitionIndex\" field")
	}
	size += fieldSize

	controllerEpochField := fields.Int32{Context: updateMetadataPartitionStateControllerEpoch}
	fieldSize, err = controllerEpochField.SizeInBytes(version, o.controllerEpoch)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"controllerEpoch\" field")
	}
	size += fieldSize

	leaderField := fields.Int32{Context: updateMetadataPartitionStateLeader}
	fieldSize, err = leaderField.SizeInBytes(version, o.leader)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"leader\" field")
	}
	size += fieldSize

	leaderEpochField := fields.Int32{Context: updateMetadataPartitionStateLeaderEpoch}
	fieldSize, err = leaderEpochField.SizeInBytes(version, o.leaderEpoch)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"leaderEpoch\" field")
	}
	size += fieldSize

	isrField := fields.Array[int32, *fields.Int32]{
		Context:          updateMetadataPartitionStateIsr,
		ElementProcessor: &fields.Int32{Context: updateMetadataPartitionStateIsr}}
	fieldSize, err = isrField.SizeInBytes(version, o.isr)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"isr\" field")
	}
	size += fieldSize

	zkVersionField := fields.Int32{Context: updateMetadataPartitionStateZkVersion}
	fieldSize, err = zkVersionField.SizeInBytes(version, o.zkVersion)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"zkVersion\" field")
	}
	size += fieldSize

	replicasField := fields.Array[int32, *fields.Int32]{
		Context:          updateMetadataPartitionStateReplicas,
		ElementProcessor: &fields.Int32{Context: updateMetadataPartitionStateReplicas}}
	fieldSize, err = replicasField.SizeInBytes(version, o.replicas)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"replicas\" field")
	}
	size += fieldSize

	offlineReplicasField := fields.Array[int32, *fields.Int32]{
		Context:          updateMetadataPartitionStateOfflineReplicas,
		ElementProcessor: &fields.Int32{Context: updateMetadataPartitionStateOfflineReplicas}}
	fieldSize, err = offlineReplicasField.SizeInBytes(version, o.offlineReplicas)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"offlineReplicas\" field")
	}
	size += fieldSize

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < UpdateMetadataPartitionStateLowestSupportedFlexVersion() || version > UpdateMetadataPartitionStateHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *UpdateMetadataPartitionState) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	o.topicName.Release()
	o.isr = nil
	o.replicas = nil
	o.offlineReplicas = nil
}

func (o *UpdateMetadataPartitionState) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *UpdateMetadataPartitionState) validateNonIgnorableFields(version int16) error {
	return nil
}

func UpdateMetadataPartitionStateLowestSupportedFlexVersion() int16 {
	return 6
}

func UpdateMetadataPartitionStateHighestSupportedFlexVersion() int16 {
	return 32767
}

func UpdateMetadataPartitionStateDefault() UpdateMetadataPartitionState {
	var d UpdateMetadataPartitionState
	d.SetDefault()

	return d
}
