// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package brokerregistration

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/messages/brokerregistration/request"
	typesbytes "github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var requestBrokerId = fields.Context{
	SpecName:                    "BrokerId",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var requestClusterId = fields.Context{
	SpecName:                    "ClusterId",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var requestIncarnationId = fields.Context{
	SpecName:                    "IncarnationId",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var requestListeners = fields.Context{
	SpecName:                    "Listeners",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var requestFeatures = fields.Context{
	SpecName:                    "Features",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var requestRack = fields.Context{
	SpecName:                        "Rack",
	LowestSupportedVersion:          0,
	HighestSupportedVersion:         32767,
	LowestSupportedFlexVersion:      0,
	HighestSupportedFlexVersion:     32767,
	LowestSupportedNullableVersion:  0,
	HighestSupportedNullableVersion: 32767,
}
var requestIsMigratingZkBroker = fields.Context{
	SpecName:                    "IsMigratingZkBroker",
	LowestSupportedVersion:      1,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}

type Request struct {
	listeners           []request.Listener
	features            []request.Feature
	unknownTaggedFields []fields.RawTaggedField
	clusterId           fields.NullableString
	rack                fields.NullableString
	brokerId            int32
	incarnationId       fields.UUID
	isMigratingZkBroker bool
	isNil               bool
}

func (o *Request) BrokerId() int32 {
	return o.brokerId
}

func (o *Request) SetBrokerId(val int32) {
	o.isNil = false
	o.brokerId = val
}

func (o *Request) ClusterId() fields.NullableString {
	return o.clusterId
}

func (o *Request) SetClusterId(val fields.NullableString) {
	o.isNil = false
	o.clusterId = val
}

func (o *Request) IncarnationId() fields.UUID {
	return o.incarnationId
}

func (o *Request) SetIncarnationId(val fields.UUID) {
	o.isNil = false
	o.incarnationId = val
}

func (o *Request) Listeners() []request.Listener {
	return o.listeners
}

func (o *Request) SetListeners(val []request.Listener) {
	o.isNil = false
	o.listeners = val
}

func (o *Request) Features() []request.Feature {
	return o.features
}

func (o *Request) SetFeatures(val []request.Feature) {
	o.isNil = false
	o.features = val
}

func (o *Request) Rack() fields.NullableString {
	return o.rack
}

func (o *Request) SetRack(val fields.NullableString) {
	o.isNil = false
	o.rack = val
}

func (o *Request) IsMigratingZkBroker() bool {
	return o.isMigratingZkBroker
}

func (o *Request) SetIsMigratingZkBroker(val bool) {
	o.isNil = false
	o.isMigratingZkBroker = val
}

func (o *Request) ApiKey() int16 {
	return 62
}

func (o *Request) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *Request) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *Request) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	brokerIdField := fields.Int32{Context: requestBrokerId}
	if err := brokerIdField.Read(buf, version, &o.brokerId); err != nil {
		return errors.WrapIf(err, "couldn't set \"brokerId\" field")
	}

	clusterIdField := fields.String{Context: requestClusterId}
	if err := clusterIdField.Read(buf, version, &o.clusterId); err != nil {
		return errors.WrapIf(err, "couldn't set \"clusterId\" field")
	}

	incarnationIdField := fields.Uuid{Context: requestIncarnationId}
	if err := incarnationIdField.Read(buf, version, &o.incarnationId); err != nil {
		return errors.WrapIf(err, "couldn't set \"incarnationId\" field")
	}

	listenersField := fields.ArrayOfStruct[request.Listener, *request.Listener]{Context: requestListeners}
	listeners, err := listenersField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"listeners\" field")
	}
	o.listeners = listeners

	featuresField := fields.ArrayOfStruct[request.Feature, *request.Feature]{Context: requestFeatures}
	features, err := featuresField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"features\" field")
	}
	o.features = features

	rackField := fields.String{Context: requestRack}
	if err := rackField.Read(buf, version, &o.rack); err != nil {
		return errors.WrapIf(err, "couldn't set \"rack\" field")
	}

	isMigratingZkBrokerField := fields.Bool{Context: requestIsMigratingZkBroker}
	if err := isMigratingZkBrokerField.Read(buf, version, &o.isMigratingZkBroker); err != nil {
		return errors.WrapIf(err, "couldn't set \"isMigratingZkBroker\" field")
	}

	// process tagged fields

	if version < RequestLowestSupportedFlexVersion() || version > RequestHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	o.unknownTaggedFields = rawTaggedFields

	o.isNil = false
	return nil
}

func (o *Request) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	brokerIdField := fields.Int32{Context: requestBrokerId}
	if err := brokerIdField.Write(buf, version, o.brokerId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"brokerId\" field")
	}
	clusterIdField := fields.String{Context: requestClusterId}
	if err := clusterIdField.Write(buf, version, o.clusterId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"clusterId\" field")
	}
	incarnationIdField := fields.Uuid{Context: requestIncarnationId}
	if err := incarnationIdField.Write(buf, version, o.incarnationId); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"incarnationId\" field")
	}

	listenersField := fields.ArrayOfStruct[request.Listener, *request.Listener]{Context: requestListeners}
	if err := listenersField.Write(buf, version, o.listeners); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"listeners\" field")
	}

	featuresField := fields.ArrayOfStruct[request.Feature, *request.Feature]{Context: requestFeatures}
	if err := featuresField.Write(buf, version, o.features); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"features\" field")
	}

	rackField := fields.String{Context: requestRack}
	if err := rackField.Write(buf, version, o.rack); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"rack\" field")
	}
	isMigratingZkBrokerField := fields.Bool{Context: requestIsMigratingZkBroker}
	if err := isMigratingZkBrokerField.Write(buf, version, o.isMigratingZkBroker); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"isMigratingZkBroker\" field")
	}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < RequestLowestSupportedFlexVersion() || version > RequestHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *Request) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *Request) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 8)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.brokerId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"brokerId\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.clusterId); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"clusterId\""), b}, []byte(": ")))
	}
	if b, err := fields.BytesMarshalJSON("incarnationId", o.incarnationId[:]); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.ArrayOfStructMarshalJSON("listeners", o.listeners); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.ArrayOfStructMarshalJSON("features", o.features); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.rack); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"rack\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.isMigratingZkBroker); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"isMigratingZkBroker\""), b}, []byte(": ")))
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *Request) IsNil() bool {
	return o.isNil
}

func (o *Request) Clear() {
	o.Release()
	o.isNil = true

	o.listeners = nil
	o.features = nil
	o.unknownTaggedFields = nil
}

func (o *Request) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.brokerId = 0
	o.clusterId.SetValue("")
	o.incarnationId.SetZero()
	for i := range o.listeners {
		o.listeners[i].Release()
	}
	o.listeners = nil
	for i := range o.features {
		o.features[i].Release()
	}
	o.features = nil
	o.rack.SetValue("")
	o.isMigratingZkBroker = false

	o.isNil = false
}

func (o *Request) Equal(that *Request) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if o.brokerId != that.brokerId {
		return false
	}
	if !o.clusterId.Equal(&that.clusterId) {
		return false
	}
	if o.incarnationId != that.incarnationId {
		return false
	}
	if len(o.listeners) != len(that.listeners) {
		return false
	}
	for i := range o.listeners {
		if !o.listeners[i].Equal(&that.listeners[i]) {
			return false
		}
	}
	if len(o.features) != len(that.features) {
		return false
	}
	for i := range o.features {
		if !o.features[i].Equal(&that.features[i]) {
			return false
		}
	}
	if !o.rack.Equal(&that.rack) {
		return false
	}
	if o.isMigratingZkBroker != that.isMigratingZkBroker {
		return false
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *Request) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	brokerIdField := fields.Int32{Context: requestBrokerId}
	fieldSize, err = brokerIdField.SizeInBytes(version, o.brokerId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"brokerId\" field")
	}
	size += fieldSize

	clusterIdField := fields.String{Context: requestClusterId}
	fieldSize, err = clusterIdField.SizeInBytes(version, o.clusterId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"clusterId\" field")
	}
	size += fieldSize

	incarnationIdField := fields.Uuid{Context: requestIncarnationId}
	fieldSize, err = incarnationIdField.SizeInBytes(version, o.incarnationId)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"incarnationId\" field")
	}
	size += fieldSize

	listenersField := fields.ArrayOfStruct[request.Listener, *request.Listener]{Context: requestListeners}
	fieldSize, err = listenersField.SizeInBytes(version, o.listeners)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"listeners\" field")
	}
	size += fieldSize

	featuresField := fields.ArrayOfStruct[request.Feature, *request.Feature]{Context: requestFeatures}
	fieldSize, err = featuresField.SizeInBytes(version, o.features)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"features\" field")
	}
	size += fieldSize

	rackField := fields.String{Context: requestRack}
	fieldSize, err = rackField.SizeInBytes(version, o.rack)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"rack\" field")
	}
	size += fieldSize

	isMigratingZkBrokerField := fields.Bool{Context: requestIsMigratingZkBroker}
	fieldSize, err = isMigratingZkBrokerField.SizeInBytes(version, o.isMigratingZkBroker)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"isMigratingZkBroker\" field")
	}
	size += fieldSize

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < RequestLowestSupportedFlexVersion() || version > RequestHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *Request) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	o.clusterId.Release()
	for i := range o.listeners {
		o.listeners[i].Release()
	}
	o.listeners = nil
	for i := range o.features {
		o.features[i].Release()
	}
	o.features = nil
	o.rack.Release()
}

func (o *Request) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *Request) validateNonIgnorableFields(version int16) error {
	if !requestIsMigratingZkBroker.IsSupportedVersion(version) {
		if o.isMigratingZkBroker {
			return errors.New(strings.Join([]string{"attempted to write non-default \"isMigratingZkBroker\" at version", strconv.Itoa(int(version))}, " "))
		}
	}
	return nil
}

func RequestLowestSupportedVersion() int16 {
	return 0
}

func RequestHighestSupportedVersion() int16 {
	return 1
}

func RequestLowestSupportedFlexVersion() int16 {
	return 0
}

func RequestHighestSupportedFlexVersion() int16 {
	return 32767
}

func RequestDefault() Request {
	var d Request
	d.SetDefault()

	return d
}
