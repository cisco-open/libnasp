// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package response

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	typesbytes "github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var finalizedFeatureKeyName = fields.Context{
	SpecName:                    "Name",
	LowestSupportedVersion:      3,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  3,
	HighestSupportedFlexVersion: 32767,
}
var finalizedFeatureKeyMaxVersionLevel = fields.Context{
	SpecName:                    "MaxVersionLevel",
	LowestSupportedVersion:      3,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  3,
	HighestSupportedFlexVersion: 32767,
}
var finalizedFeatureKeyMinVersionLevel = fields.Context{
	SpecName:                    "MinVersionLevel",
	LowestSupportedVersion:      3,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  3,
	HighestSupportedFlexVersion: 32767,
}

type FinalizedFeatureKey struct {
	unknownTaggedFields []fields.RawTaggedField
	name                fields.NullableString
	maxVersionLevel     int16
	minVersionLevel     int16
	isNil               bool
}

func (o *FinalizedFeatureKey) Name() fields.NullableString {
	return o.name
}

func (o *FinalizedFeatureKey) SetName(val fields.NullableString) {
	o.isNil = false
	o.name = val
}

func (o *FinalizedFeatureKey) MaxVersionLevel() int16 {
	return o.maxVersionLevel
}

func (o *FinalizedFeatureKey) SetMaxVersionLevel(val int16) {
	o.isNil = false
	o.maxVersionLevel = val
}

func (o *FinalizedFeatureKey) MinVersionLevel() int16 {
	return o.minVersionLevel
}

func (o *FinalizedFeatureKey) SetMinVersionLevel(val int16) {
	o.isNil = false
	o.minVersionLevel = val
}

func (o *FinalizedFeatureKey) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *FinalizedFeatureKey) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *FinalizedFeatureKey) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	nameField := fields.String{Context: finalizedFeatureKeyName}
	if err := nameField.Read(buf, version, &o.name); err != nil {
		return errors.WrapIf(err, "couldn't set \"name\" field")
	}

	maxVersionLevelField := fields.Int16{Context: finalizedFeatureKeyMaxVersionLevel}
	if err := maxVersionLevelField.Read(buf, version, &o.maxVersionLevel); err != nil {
		return errors.WrapIf(err, "couldn't set \"maxVersionLevel\" field")
	}

	minVersionLevelField := fields.Int16{Context: finalizedFeatureKeyMinVersionLevel}
	if err := minVersionLevelField.Read(buf, version, &o.minVersionLevel); err != nil {
		return errors.WrapIf(err, "couldn't set \"minVersionLevel\" field")
	}

	// process tagged fields

	if version < FinalizedFeatureKeyLowestSupportedFlexVersion() || version > FinalizedFeatureKeyHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	o.unknownTaggedFields = rawTaggedFields

	o.isNil = false
	return nil
}

func (o *FinalizedFeatureKey) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	nameField := fields.String{Context: finalizedFeatureKeyName}
	if err := nameField.Write(buf, version, o.name); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"name\" field")
	}
	maxVersionLevelField := fields.Int16{Context: finalizedFeatureKeyMaxVersionLevel}
	if err := maxVersionLevelField.Write(buf, version, o.maxVersionLevel); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"maxVersionLevel\" field")
	}
	minVersionLevelField := fields.Int16{Context: finalizedFeatureKeyMinVersionLevel}
	if err := minVersionLevelField.Write(buf, version, o.minVersionLevel); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"minVersionLevel\" field")
	}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < FinalizedFeatureKeyLowestSupportedFlexVersion() || version > FinalizedFeatureKeyHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *FinalizedFeatureKey) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *FinalizedFeatureKey) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 4)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.name); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"name\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.maxVersionLevel); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"maxVersionLevel\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.minVersionLevel); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"minVersionLevel\""), b}, []byte(": ")))
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *FinalizedFeatureKey) IsNil() bool {
	return o.isNil
}

func (o *FinalizedFeatureKey) Clear() {
	o.Release()
	o.isNil = true

	o.unknownTaggedFields = nil
}

func (o *FinalizedFeatureKey) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.name.SetValue("")
	o.maxVersionLevel = 0
	o.minVersionLevel = 0

	o.isNil = false
}

func (o *FinalizedFeatureKey) Equal(that *FinalizedFeatureKey) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if !o.name.Equal(&that.name) {
		return false
	}
	if o.maxVersionLevel != that.maxVersionLevel {
		return false
	}
	if o.minVersionLevel != that.minVersionLevel {
		return false
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *FinalizedFeatureKey) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	nameField := fields.String{Context: finalizedFeatureKeyName}
	fieldSize, err = nameField.SizeInBytes(version, o.name)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"name\" field")
	}
	size += fieldSize

	maxVersionLevelField := fields.Int16{Context: finalizedFeatureKeyMaxVersionLevel}
	fieldSize, err = maxVersionLevelField.SizeInBytes(version, o.maxVersionLevel)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"maxVersionLevel\" field")
	}
	size += fieldSize

	minVersionLevelField := fields.Int16{Context: finalizedFeatureKeyMinVersionLevel}
	fieldSize, err = minVersionLevelField.SizeInBytes(version, o.minVersionLevel)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"minVersionLevel\" field")
	}
	size += fieldSize

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < FinalizedFeatureKeyLowestSupportedFlexVersion() || version > FinalizedFeatureKeyHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *FinalizedFeatureKey) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	o.name.Release()
}

func (o *FinalizedFeatureKey) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *FinalizedFeatureKey) validateNonIgnorableFields(version int16) error {
	if !finalizedFeatureKeyName.IsSupportedVersion(version) {
		if o.name.Bytes() != nil {
			return errors.New(strings.Join([]string{"attempted to write non-default \"name\" at version", strconv.Itoa(int(version))}, " "))
		}
	}
	if !finalizedFeatureKeyMaxVersionLevel.IsSupportedVersion(version) {
		if o.maxVersionLevel != 0 {
			return errors.New(strings.Join([]string{"attempted to write non-default \"maxVersionLevel\" at version", strconv.Itoa(int(version))}, " "))
		}
	}
	if !finalizedFeatureKeyMinVersionLevel.IsSupportedVersion(version) {
		if o.minVersionLevel != 0 {
			return errors.New(strings.Join([]string{"attempted to write non-default \"minVersionLevel\" at version", strconv.Itoa(int(version))}, " "))
		}
	}
	return nil
}

func FinalizedFeatureKeyLowestSupportedVersion() int16 {
	return 3
}

func FinalizedFeatureKeyHighestSupportedVersion() int16 {
	return 32767
}

func FinalizedFeatureKeyLowestSupportedFlexVersion() int16 {
	return 3
}

func FinalizedFeatureKeyHighestSupportedFlexVersion() int16 {
	return 32767
}

func FinalizedFeatureKeyDefault() FinalizedFeatureKey {
	var d FinalizedFeatureKey
	d.SetDefault()

	return d
}
