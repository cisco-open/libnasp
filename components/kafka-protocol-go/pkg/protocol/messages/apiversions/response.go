// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package apiversions

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	"github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/messages/apiversions/response"
	typesbytes "github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/libnasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var responseErrorCode = fields.Context{
	SpecName:                    "ErrorCode",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  3,
	HighestSupportedFlexVersion: 32767,
}
var responseApiKeys = fields.Context{
	SpecName:                    "ApiKeys",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  3,
	HighestSupportedFlexVersion: 32767,
}
var responseThrottleTimeMs = fields.Context{
	SpecName:                    "ThrottleTimeMs",
	LowestSupportedVersion:      1,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  3,
	HighestSupportedFlexVersion: 32767,
}
var responseSupportedFeatures = fields.Context{
	SpecName:                      "SupportedFeatures",
	SpecTag:                       fields.Tag(0),
	LowestSupportedVersion:        3,
	HighestSupportedVersion:       32767,
	LowestSupportedFlexVersion:    3,
	HighestSupportedFlexVersion:   32767,
	LowestSupportedTaggedVersion:  3,
	HighestSupportedTaggedVersion: 32767,
}
var responseFinalizedFeaturesEpoch = fields.Context{
	SpecName:                      "FinalizedFeaturesEpoch",
	SpecTag:                       fields.Tag(1),
	CustomDefaultValue:            int64(-1),
	LowestSupportedVersion:        3,
	HighestSupportedVersion:       32767,
	LowestSupportedFlexVersion:    3,
	HighestSupportedFlexVersion:   32767,
	LowestSupportedTaggedVersion:  3,
	HighestSupportedTaggedVersion: 32767,
}
var responseFinalizedFeatures = fields.Context{
	SpecName:                      "FinalizedFeatures",
	SpecTag:                       fields.Tag(2),
	LowestSupportedVersion:        3,
	HighestSupportedVersion:       32767,
	LowestSupportedFlexVersion:    3,
	HighestSupportedFlexVersion:   32767,
	LowestSupportedTaggedVersion:  3,
	HighestSupportedTaggedVersion: 32767,
}
var responseZkMigrationReady = fields.Context{
	SpecName:                      "ZkMigrationReady",
	SpecTag:                       fields.Tag(3),
	LowestSupportedVersion:        3,
	HighestSupportedVersion:       32767,
	LowestSupportedFlexVersion:    3,
	HighestSupportedFlexVersion:   32767,
	LowestSupportedTaggedVersion:  3,
	HighestSupportedTaggedVersion: 32767,
}

type Response struct {
	apiKeys                []response.ApiVersion
	supportedFeatures      []response.SupportedFeatureKey
	finalizedFeatures      []response.FinalizedFeatureKey
	unknownTaggedFields    []fields.RawTaggedField
	finalizedFeaturesEpoch int64
	throttleTimeMs         int32
	errorCode              int16
	zkMigrationReady       bool
	isNil                  bool
}

func (o *Response) ErrorCode() int16 {
	return o.errorCode
}

func (o *Response) SetErrorCode(val int16) {
	o.isNil = false
	o.errorCode = val
}

func (o *Response) ApiKeys() []response.ApiVersion {
	return o.apiKeys
}

func (o *Response) SetApiKeys(val []response.ApiVersion) {
	o.isNil = false
	o.apiKeys = val
}

func (o *Response) ThrottleTimeMs() int32 {
	return o.throttleTimeMs
}

func (o *Response) SetThrottleTimeMs(val int32) {
	o.isNil = false
	o.throttleTimeMs = val
}

func (o *Response) SupportedFeatures() []response.SupportedFeatureKey {
	return o.supportedFeatures
}

func (o *Response) SetSupportedFeatures(val []response.SupportedFeatureKey) {
	o.isNil = false
	o.supportedFeatures = val
}

func (o *Response) FinalizedFeaturesEpoch() int64 {
	return o.finalizedFeaturesEpoch
}

func (o *Response) SetFinalizedFeaturesEpoch(val int64) {
	o.isNil = false
	o.finalizedFeaturesEpoch = val
}

func (o *Response) FinalizedFeatures() []response.FinalizedFeatureKey {
	return o.finalizedFeatures
}

func (o *Response) SetFinalizedFeatures(val []response.FinalizedFeatureKey) {
	o.isNil = false
	o.finalizedFeatures = val
}

func (o *Response) ZkMigrationReady() bool {
	return o.zkMigrationReady
}

func (o *Response) SetZkMigrationReady(val bool) {
	o.isNil = false
	o.zkMigrationReady = val
}

func (o *Response) ApiKey() int16 {
	return 18
}

func (o *Response) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *Response) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *Response) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	errorCodeField := fields.Int16{Context: responseErrorCode}
	if err := errorCodeField.Read(buf, version, &o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't set \"errorCode\" field")
	}

	apiKeysField := fields.ArrayOfStruct[response.ApiVersion, *response.ApiVersion]{Context: responseApiKeys}
	apiKeys, err := apiKeysField.Read(buf, version)
	if err != nil {
		return errors.WrapIf(err, "couldn't set \"apiKeys\" field")
	}
	o.apiKeys = apiKeys

	throttleTimeMsField := fields.Int32{Context: responseThrottleTimeMs}
	if err := throttleTimeMsField.Read(buf, version, &o.throttleTimeMs); err != nil {
		return errors.WrapIf(err, "couldn't set \"throttleTimeMs\" field")
	}

	// process tagged fields

	if version < ResponseLowestSupportedFlexVersion() || version > ResponseHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	supportedFeaturesField := fields.ArrayOfStruct[response.SupportedFeatureKey, *response.SupportedFeatureKey]{Context: responseSupportedFeatures}

	finalizedFeaturesEpochField := fields.Int64{Context: responseFinalizedFeaturesEpoch}
	finalizedFeaturesField := fields.ArrayOfStruct[response.FinalizedFeatureKey, *response.FinalizedFeatureKey]{Context: responseFinalizedFeatures}

	zkMigrationReadyField := fields.Bool{Context: responseZkMigrationReady}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	for i := range rawTaggedFields {
		switch rawTaggedFields[i].Tag() {
		case 0:
			if !responseSupportedFeatures.IsTaggedVersion(version) {
				return errors.New(strings.Join([]string{"tagged field \"supportedFeatures\" is not supported by version", strconv.Itoa(int(version))}, " "))
			}
			supportedFeatures, err := supportedFeaturesField.Read(bytes.NewReader(rawTaggedFields[i].Value()), version)
			if err != nil {
				return errors.WrapIf(err, "couldn't set \"supportedFeatures\" field")
			}
			o.supportedFeatures = supportedFeatures
			rawTaggedFields[i].Release()
		case 1:
			if !responseFinalizedFeaturesEpoch.IsTaggedVersion(version) {
				return errors.New(strings.Join([]string{"tagged field \"finalizedFeaturesEpoch\" is not supported by version", strconv.Itoa(int(version))}, " "))
			}
			if err := finalizedFeaturesEpochField.Read(bytes.NewReader(rawTaggedFields[i].Value()), version, &o.finalizedFeaturesEpoch); err != nil {
				return errors.WrapIf(err, "couldn't set \"finalizedFeaturesEpoch\" field")
			}
			rawTaggedFields[i].Release()
		case 2:
			if !responseFinalizedFeatures.IsTaggedVersion(version) {
				return errors.New(strings.Join([]string{"tagged field \"finalizedFeatures\" is not supported by version", strconv.Itoa(int(version))}, " "))
			}
			finalizedFeatures, err := finalizedFeaturesField.Read(bytes.NewReader(rawTaggedFields[i].Value()), version)
			if err != nil {
				return errors.WrapIf(err, "couldn't set \"finalizedFeatures\" field")
			}
			o.finalizedFeatures = finalizedFeatures
			rawTaggedFields[i].Release()
		case 3:
			if !responseZkMigrationReady.IsTaggedVersion(version) {
				return errors.New(strings.Join([]string{"tagged field \"zkMigrationReady\" is not supported by version", strconv.Itoa(int(version))}, " "))
			}
			if err := zkMigrationReadyField.Read(bytes.NewReader(rawTaggedFields[i].Value()), version, &o.zkMigrationReady); err != nil {
				return errors.WrapIf(err, "couldn't set \"zkMigrationReady\" field")
			}
			rawTaggedFields[i].Release()
		default:
			o.unknownTaggedFields = append(o.unknownTaggedFields, rawTaggedFields[i])
		}
	}

	o.isNil = false
	return nil
}

func (o *Response) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	errorCodeField := fields.Int16{Context: responseErrorCode}
	if err := errorCodeField.Write(buf, version, o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"errorCode\" field")
	}

	apiKeysField := fields.ArrayOfStruct[response.ApiVersion, *response.ApiVersion]{Context: responseApiKeys}
	if err := apiKeysField.Write(buf, version, o.apiKeys); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"apiKeys\" field")
	}

	throttleTimeMsField := fields.Int32{Context: responseThrottleTimeMs}
	if err := throttleTimeMsField.Write(buf, version, o.throttleTimeMs); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"throttleTimeMs\" field")
	}

	supportedFeaturesField := fields.ArrayOfStruct[response.SupportedFeatureKey, *response.SupportedFeatureKey]{Context: responseSupportedFeatures}

	finalizedFeaturesEpochField := fields.Int64{Context: responseFinalizedFeaturesEpoch}

	finalizedFeaturesField := fields.ArrayOfStruct[response.FinalizedFeatureKey, *response.FinalizedFeatureKey]{Context: responseFinalizedFeatures}

	zkMigrationReadyField := fields.Bool{Context: responseZkMigrationReady}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < ResponseLowestSupportedFlexVersion() || version > ResponseHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)
	var taggedField fields.RawTaggedField

	if responseSupportedFeatures.IsTaggedVersion(version) && len(o.supportedFeatures) > 0 {
		size, err := supportedFeaturesField.SizeInBytes(version, o.supportedFeatures)
		if err != nil {
			return errors.WrapIf(err, "couldn't determine \"supportedFeatures\" field size in bytes")
		}
		w := typesbytes.NewSliceWriter(make([]byte, 0, size))
		if err := supportedFeaturesField.Write(&w, version, o.supportedFeatures); err != nil {
			return errors.WrapIf(err, "couldn't serialize \"supportedFeatures\" field")
		}
		taggedField.SetTag(0)
		taggedField.SetValue(w.Bytes())
		rawTaggedFields = append(rawTaggedFields, taggedField)
	}
	if responseFinalizedFeaturesEpoch.IsTaggedVersion(version) && o.finalizedFeaturesEpoch != -1 {
		size, err := finalizedFeaturesEpochField.SizeInBytes(version, o.finalizedFeaturesEpoch)
		if err != nil {
			return errors.WrapIf(err, "couldn't determine \"finalizedFeaturesEpoch\" field size in bytes")
		}
		w := typesbytes.NewSliceWriter(make([]byte, 0, size))
		if err := finalizedFeaturesEpochField.Write(&w, version, o.finalizedFeaturesEpoch); err != nil {
			return errors.WrapIf(err, "couldn't serialize \"finalizedFeaturesEpoch\" field")
		}
		taggedField.SetTag(1)
		taggedField.SetValue(w.Bytes())
		rawTaggedFields = append(rawTaggedFields, taggedField)
	}
	if responseFinalizedFeatures.IsTaggedVersion(version) && len(o.finalizedFeatures) > 0 {
		size, err := finalizedFeaturesField.SizeInBytes(version, o.finalizedFeatures)
		if err != nil {
			return errors.WrapIf(err, "couldn't determine \"finalizedFeatures\" field size in bytes")
		}
		w := typesbytes.NewSliceWriter(make([]byte, 0, size))
		if err := finalizedFeaturesField.Write(&w, version, o.finalizedFeatures); err != nil {
			return errors.WrapIf(err, "couldn't serialize \"finalizedFeatures\" field")
		}
		taggedField.SetTag(2)
		taggedField.SetValue(w.Bytes())
		rawTaggedFields = append(rawTaggedFields, taggedField)
	}
	if responseZkMigrationReady.IsTaggedVersion(version) && o.zkMigrationReady {
		size, err := zkMigrationReadyField.SizeInBytes(version, o.zkMigrationReady)
		if err != nil {
			return errors.WrapIf(err, "couldn't determine \"zkMigrationReady\" field size in bytes")
		}
		w := typesbytes.NewSliceWriter(make([]byte, 0, size))
		if err := zkMigrationReadyField.Write(&w, version, o.zkMigrationReady); err != nil {
			return errors.WrapIf(err, "couldn't serialize \"zkMigrationReady\" field")
		}
		taggedField.SetTag(3)
		taggedField.SetValue(w.Bytes())
		rawTaggedFields = append(rawTaggedFields, taggedField)
	}

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *Response) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *Response) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 8)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.errorCode); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"errorCode\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayOfStructMarshalJSON("apiKeys", o.apiKeys); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.throttleTimeMs); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"throttleTimeMs\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayOfStructMarshalJSON("supportedFeatures", o.supportedFeatures); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.finalizedFeaturesEpoch); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"finalizedFeaturesEpoch\""), b}, []byte(": ")))
	}
	if b, err := fields.ArrayOfStructMarshalJSON("finalizedFeatures", o.finalizedFeatures); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.zkMigrationReady); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"zkMigrationReady\""), b}, []byte(": ")))
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *Response) IsNil() bool {
	return o.isNil
}

func (o *Response) Clear() {
	o.Release()
	o.isNil = true

	o.apiKeys = nil
	o.supportedFeatures = nil
	o.finalizedFeatures = nil
	o.unknownTaggedFields = nil
}

func (o *Response) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.errorCode = 0
	for i := range o.apiKeys {
		o.apiKeys[i].Release()
	}
	o.apiKeys = nil
	o.throttleTimeMs = 0
	for i := range o.supportedFeatures {
		o.supportedFeatures[i].Release()
	}
	o.supportedFeatures = nil
	o.finalizedFeaturesEpoch = -1
	for i := range o.finalizedFeatures {
		o.finalizedFeatures[i].Release()
	}
	o.finalizedFeatures = nil
	o.zkMigrationReady = false

	o.isNil = false
}

func (o *Response) Equal(that *Response) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if o.errorCode != that.errorCode {
		return false
	}
	if len(o.apiKeys) != len(that.apiKeys) {
		return false
	}
	for i := range o.apiKeys {
		if !o.apiKeys[i].Equal(&that.apiKeys[i]) {
			return false
		}
	}
	if o.throttleTimeMs != that.throttleTimeMs {
		return false
	}
	if len(o.supportedFeatures) != len(that.supportedFeatures) {
		return false
	}
	for i := range o.supportedFeatures {
		if !o.supportedFeatures[i].Equal(&that.supportedFeatures[i]) {
			return false
		}
	}
	if o.finalizedFeaturesEpoch != that.finalizedFeaturesEpoch {
		return false
	}
	if len(o.finalizedFeatures) != len(that.finalizedFeatures) {
		return false
	}
	for i := range o.finalizedFeatures {
		if !o.finalizedFeatures[i].Equal(&that.finalizedFeatures[i]) {
			return false
		}
	}
	if o.zkMigrationReady != that.zkMigrationReady {
		return false
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *Response) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	errorCodeField := fields.Int16{Context: responseErrorCode}
	fieldSize, err = errorCodeField.SizeInBytes(version, o.errorCode)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"errorCode\" field")
	}
	size += fieldSize

	apiKeysField := fields.ArrayOfStruct[response.ApiVersion, *response.ApiVersion]{Context: responseApiKeys}
	fieldSize, err = apiKeysField.SizeInBytes(version, o.apiKeys)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"apiKeys\" field")
	}
	size += fieldSize

	throttleTimeMsField := fields.Int32{Context: responseThrottleTimeMs}
	fieldSize, err = throttleTimeMsField.SizeInBytes(version, o.throttleTimeMs)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"throttleTimeMs\" field")
	}
	size += fieldSize

	supportedFeaturesField := fields.ArrayOfStruct[response.SupportedFeatureKey, *response.SupportedFeatureKey]{Context: responseSupportedFeatures}

	finalizedFeaturesEpochField := fields.Int64{Context: responseFinalizedFeaturesEpoch}

	finalizedFeaturesField := fields.ArrayOfStruct[response.FinalizedFeatureKey, *response.FinalizedFeatureKey]{Context: responseFinalizedFeatures}

	zkMigrationReadyField := fields.Bool{Context: responseZkMigrationReady}

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < ResponseLowestSupportedFlexVersion() || version > ResponseHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields
	fieldSize = 0

	if responseSupportedFeatures.IsTaggedVersion(version) && len(o.supportedFeatures) > 0 {
		fieldSize, err = supportedFeaturesField.SizeInBytes(version, o.supportedFeatures)
		if err != nil {
			return 0, errors.WrapIf(err, "couldn't compute size of \"supportedFeatures\" field")
		}
		if int64(fieldSize) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid \"supportedFeatures\" tagged field value length:", strconv.Itoa(fieldSize)}, " "))
		}
		fieldSize += varint.Uint32Size(uint32(fieldSize)) // bytes for serializing the length of the "supportedFeatures" field
		fieldSize += varint.Uint32Size(0)                 // bytes for serializing the tag of the "supportedFeatures" field
		taggedFieldsSize += fieldSize
	}
	if responseFinalizedFeaturesEpoch.IsTaggedVersion(version) && o.finalizedFeaturesEpoch != -1 {
		fieldSize, err = finalizedFeaturesEpochField.SizeInBytes(version, o.finalizedFeaturesEpoch)
		if err != nil {
			return 0, errors.WrapIf(err, "couldn't compute size of \"finalizedFeaturesEpoch\" field")
		}
		if int64(fieldSize) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid \"finalizedFeaturesEpoch\" tagged field value length:", strconv.Itoa(fieldSize)}, " "))
		}
		fieldSize += varint.Uint32Size(uint32(fieldSize)) // bytes for serializing the length of the "finalizedFeaturesEpoch" field
		fieldSize += varint.Uint32Size(1)                 // bytes for serializing the tag of the "finalizedFeaturesEpoch" field
		taggedFieldsSize += fieldSize
	}
	if responseFinalizedFeatures.IsTaggedVersion(version) && len(o.finalizedFeatures) > 0 {
		fieldSize, err = finalizedFeaturesField.SizeInBytes(version, o.finalizedFeatures)
		if err != nil {
			return 0, errors.WrapIf(err, "couldn't compute size of \"finalizedFeatures\" field")
		}
		if int64(fieldSize) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid \"finalizedFeatures\" tagged field value length:", strconv.Itoa(fieldSize)}, " "))
		}
		fieldSize += varint.Uint32Size(uint32(fieldSize)) // bytes for serializing the length of the "finalizedFeatures" field
		fieldSize += varint.Uint32Size(2)                 // bytes for serializing the tag of the "finalizedFeatures" field
		taggedFieldsSize += fieldSize
	}
	if responseZkMigrationReady.IsTaggedVersion(version) && o.zkMigrationReady {
		fieldSize, err = zkMigrationReadyField.SizeInBytes(version, o.zkMigrationReady)
		if err != nil {
			return 0, errors.WrapIf(err, "couldn't compute size of \"zkMigrationReady\" field")
		}
		if int64(fieldSize) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid \"zkMigrationReady\" tagged field value length:", strconv.Itoa(fieldSize)}, " "))
		}
		fieldSize += varint.Uint32Size(uint32(fieldSize)) // bytes for serializing the length of the "zkMigrationReady" field
		fieldSize += varint.Uint32Size(3)                 // bytes for serializing the tag of the "zkMigrationReady" field
		taggedFieldsSize += fieldSize
	}

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *Response) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	for i := range o.apiKeys {
		o.apiKeys[i].Release()
	}
	o.apiKeys = nil
	for i := range o.supportedFeatures {
		o.supportedFeatures[i].Release()
	}
	o.supportedFeatures = nil
	for i := range o.finalizedFeatures {
		o.finalizedFeatures[i].Release()
	}
	o.finalizedFeatures = nil
}

func (o *Response) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	if responseSupportedFeatures.IsTaggedVersion(version) && len(o.supportedFeatures) > 0 {
		numTaggedFields++
	}
	if responseFinalizedFeaturesEpoch.IsTaggedVersion(version) && o.finalizedFeaturesEpoch != -1 {
		numTaggedFields++
	}
	if responseFinalizedFeatures.IsTaggedVersion(version) && len(o.finalizedFeatures) > 0 {
		numTaggedFields++
	}
	if responseZkMigrationReady.IsTaggedVersion(version) && o.zkMigrationReady {
		numTaggedFields++
	}

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *Response) validateNonIgnorableFields(version int16) error {
	return nil
}

func ResponseLowestSupportedVersion() int16 {
	return 0
}

func ResponseHighestSupportedVersion() int16 {
	return 3
}

func ResponseLowestSupportedFlexVersion() int16 {
	return 3
}

func ResponseHighestSupportedFlexVersion() int16 {
	return 32767
}

func ResponseDefault() Response {
	var d Response
	d.SetDefault()

	return d
}
