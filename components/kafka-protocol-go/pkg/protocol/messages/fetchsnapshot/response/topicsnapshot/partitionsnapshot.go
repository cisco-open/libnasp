// Code generated by kafka-protocol-go. DO NOT EDIT.

// Copyright (c) 2023 Cisco and/or its affiliates. All rights reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	     https://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
package topicsnapshot

import (
	"bytes"
	"strconv"
	"strings"

	"emperror.dev/errors"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/messages/fetchsnapshot/response/topicsnapshot/partitionsnapshot"
	typesbytes "github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/bytes"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/fields"
	"github.com/cisco-open/nasp/components/kafka-protocol-go/pkg/protocol/types/varint"
)

var partitionSnapshotIndex = fields.Context{
	SpecName:                    "Index",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var partitionSnapshotErrorCode = fields.Context{
	SpecName:                    "ErrorCode",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var partitionSnapshotSnapshotId = fields.Context{
	SpecName:                    "SnapshotId",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var partitionSnapshotCurrentLeader = fields.Context{
	SpecName:                      "CurrentLeader",
	SpecTag:                       fields.Tag(0),
	LowestSupportedVersion:        0,
	HighestSupportedVersion:       32767,
	LowestSupportedFlexVersion:    0,
	HighestSupportedFlexVersion:   32767,
	LowestSupportedTaggedVersion:  0,
	HighestSupportedTaggedVersion: 32767,
}
var partitionSnapshotSize = fields.Context{
	SpecName:                    "Size",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var partitionSnapshotPosition = fields.Context{
	SpecName:                    "Position",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}
var partitionSnapshotUnalignedRecords = fields.Context{
	SpecName:                    "UnalignedRecords",
	LowestSupportedVersion:      0,
	HighestSupportedVersion:     32767,
	LowestSupportedFlexVersion:  0,
	HighestSupportedFlexVersion: 32767,
}

type PartitionSnapshot struct {
	unknownTaggedFields []fields.RawTaggedField
	unalignedRecords    fields.RecordBatches
	snapshotId          partitionsnapshot.SnapshotId
	currentLeader       partitionsnapshot.LeaderIdAndEpoch
	size                int64
	position            int64
	index               int32
	errorCode           int16
	isNil               bool
}

func (o *PartitionSnapshot) Index() int32 {
	return o.index
}

func (o *PartitionSnapshot) SetIndex(val int32) {
	o.isNil = false
	o.index = val
}

func (o *PartitionSnapshot) ErrorCode() int16 {
	return o.errorCode
}

func (o *PartitionSnapshot) SetErrorCode(val int16) {
	o.isNil = false
	o.errorCode = val
}

func (o *PartitionSnapshot) SnapshotId() partitionsnapshot.SnapshotId {
	return o.snapshotId
}

func (o *PartitionSnapshot) SetSnapshotId(val partitionsnapshot.SnapshotId) {
	o.isNil = false
	o.snapshotId = val
}

func (o *PartitionSnapshot) CurrentLeader() partitionsnapshot.LeaderIdAndEpoch {
	return o.currentLeader
}

func (o *PartitionSnapshot) SetCurrentLeader(val partitionsnapshot.LeaderIdAndEpoch) {
	o.isNil = false
	o.currentLeader = val
}

func (o *PartitionSnapshot) Size() int64 {
	return o.size
}

func (o *PartitionSnapshot) SetSize(val int64) {
	o.isNil = false
	o.size = val
}

func (o *PartitionSnapshot) Position() int64 {
	return o.position
}

func (o *PartitionSnapshot) SetPosition(val int64) {
	o.isNil = false
	o.position = val
}

func (o *PartitionSnapshot) UnalignedRecords() fields.RecordBatches {
	return o.unalignedRecords
}

func (o *PartitionSnapshot) SetUnalignedRecords(val fields.RecordBatches) {
	o.isNil = false
	o.unalignedRecords = val
}

func (o *PartitionSnapshot) UnknownTaggedFields() []fields.RawTaggedField {
	return o.unknownTaggedFields
}

func (o *PartitionSnapshot) SetUnknownTaggedFields(val []fields.RawTaggedField) {
	o.unknownTaggedFields = val
}

func (o *PartitionSnapshot) Read(buf *bytes.Reader, version int16) error {
	o.SetDefault()

	indexField := fields.Int32{Context: partitionSnapshotIndex}
	if err := indexField.Read(buf, version, &o.index); err != nil {
		return errors.WrapIf(err, "couldn't set \"index\" field")
	}

	errorCodeField := fields.Int16{Context: partitionSnapshotErrorCode}
	if err := errorCodeField.Read(buf, version, &o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't set \"errorCode\" field")
	}

	if partitionSnapshotSnapshotId.IsSupportedVersion(version) {
		if err := o.snapshotId.Read(buf, version); err != nil {
			return errors.WrapIf(err, "couldn't set \"snapshotId\" field")
		}
	}

	sizeField := fields.Int64{Context: partitionSnapshotSize}
	if err := sizeField.Read(buf, version, &o.size); err != nil {
		return errors.WrapIf(err, "couldn't set \"size\" field")
	}

	positionField := fields.Int64{Context: partitionSnapshotPosition}
	if err := positionField.Read(buf, version, &o.position); err != nil {
		return errors.WrapIf(err, "couldn't set \"position\" field")
	}

	unalignedRecordsField := fields.Records{Context: partitionSnapshotUnalignedRecords}
	if err := unalignedRecordsField.Read(buf, version, &o.unalignedRecords); err != nil {
		return errors.WrapIf(err, "couldn't set \"unalignedRecords\" field")
	}

	// process tagged fields

	if version < PartitionSnapshotLowestSupportedFlexVersion() || version > PartitionSnapshotHighestSupportedFlexVersion() {
		// tagged fields are only supported by flexible versions
		o.isNil = false
		return nil
	}

	if buf.Len() == 0 {
		o.isNil = false
		return nil
	}

	rawTaggedFields, err := fields.ReadRawTaggedFields(buf)
	if err != nil {
		return err
	}

	for i := range rawTaggedFields {
		switch rawTaggedFields[i].Tag() {
		case 0:
			if !partitionSnapshotCurrentLeader.IsTaggedVersion(version) {
				return errors.New(strings.Join([]string{"tagged field \"currentLeader\" is not supported by version", strconv.Itoa(int(version))}, " "))
			}
			if err := o.currentLeader.Read(bytes.NewReader(rawTaggedFields[i].Value()), version); err != nil {
				return errors.WrapIf(err, "couldn't set \"currentLeader\" field")
			}
			rawTaggedFields[i].Release()
		default:
			o.unknownTaggedFields = append(o.unknownTaggedFields, rawTaggedFields[i])
		}
	}

	o.isNil = false
	return nil
}

func (o *PartitionSnapshot) Write(buf *typesbytes.SliceWriter, version int16) error {
	if o.IsNil() {
		return nil
	}
	if err := o.validateNonIgnorableFields(version); err != nil {
		return err
	}

	indexField := fields.Int32{Context: partitionSnapshotIndex}
	if err := indexField.Write(buf, version, o.index); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"index\" field")
	}
	errorCodeField := fields.Int16{Context: partitionSnapshotErrorCode}
	if err := errorCodeField.Write(buf, version, o.errorCode); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"errorCode\" field")
	}

	if partitionSnapshotSnapshotId.IsSupportedVersion(version) {
		if err := o.snapshotId.Write(buf, version); err != nil {
			return errors.WrapIf(err, "couldn't serialize \"snapshotId\" field")
		}
	}

	sizeField := fields.Int64{Context: partitionSnapshotSize}
	if err := sizeField.Write(buf, version, o.size); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"size\" field")
	}
	positionField := fields.Int64{Context: partitionSnapshotPosition}
	if err := positionField.Write(buf, version, o.position); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"position\" field")
	}
	unalignedRecordsField := fields.Records{Context: partitionSnapshotUnalignedRecords}
	if err := unalignedRecordsField.Write(buf, version, &o.unalignedRecords); err != nil {
		return errors.WrapIf(err, "couldn't serialize \"unalignedRecords\" field")
	}

	// serialize tagged fields
	numTaggedFields := o.getTaggedFieldsCount(version)
	if version < PartitionSnapshotLowestSupportedFlexVersion() || version > PartitionSnapshotHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return nil
	}

	rawTaggedFields := make([]fields.RawTaggedField, 0, numTaggedFields)
	rawTaggedFields = append(rawTaggedFields, o.unknownTaggedFields...)
	var taggedField fields.RawTaggedField

	currentLeaderDefaultValue := partitionsnapshot.LeaderIdAndEpochDefault()
	if partitionSnapshotCurrentLeader.IsTaggedVersion(version) && !o.currentLeader.Equal(&currentLeaderDefaultValue) {
		size, err := o.currentLeader.SizeInBytes(version)
		if err != nil {
			return errors.WrapIf(err, "couldn't determine \"currentLeader\" field size in bytes")
		}
		w := typesbytes.NewSliceWriter(make([]byte, 0, size))
		if err := o.currentLeader.Write(&w, version); err != nil {
			return errors.WrapIf(err, "couldn't serialize \"currentLeader\" field")
		}
		taggedField.SetTag(0)
		taggedField.SetValue(w.Bytes())
		rawTaggedFields = append(rawTaggedFields, taggedField)
	}

	if err := fields.WriteRawTaggedFields(buf, rawTaggedFields); err != nil {
		return errors.WrapIf(err, "couldn't serialize tagged fields")
	}

	return nil
}

func (o *PartitionSnapshot) String() string {
	s, err := o.MarshalJSON()
	if err != nil {
		return err.Error()
	}

	return string(s)
}

func (o *PartitionSnapshot) MarshalJSON() ([]byte, error) {
	if o == nil || o.IsNil() {
		return []byte("null"), nil
	}

	s := make([][]byte, 0, 8)
	if b, err := fields.MarshalPrimitiveTypeJSON(o.index); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"index\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.errorCode); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"errorCode\""), b}, []byte(": ")))
	}
	if b, err := o.snapshotId.MarshalJSON(); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"snapshotId\""), b}, []byte(": ")))
	}
	if b, err := o.currentLeader.MarshalJSON(); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"currentLeader\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.size); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"size\""), b}, []byte(": ")))
	}
	if b, err := fields.MarshalPrimitiveTypeJSON(o.position); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"position\""), b}, []byte(": ")))
	}
	if b, err := o.unalignedRecords.MarshalJSON(); err != nil {
		return nil, err
	} else {
		s = append(s, bytes.Join([][]byte{[]byte("\"unalignedRecords\""), b}, []byte(": ")))
	}

	if b, err := fields.ArrayOfStructMarshalJSON("unknownTaggedFields", o.unknownTaggedFields); err != nil {
		return nil, err
	} else {
		s = append(s, b)
	}

	var b bytes.Buffer
	if err := b.WriteByte('{'); err != nil {
		return nil, err
	}
	if _, err := b.Write(bytes.Join(s, []byte(", "))); err != nil {
		return nil, err
	}
	if err := b.WriteByte('}'); err != nil {
		return nil, err
	}

	return b.Bytes(), nil
}

func (o *PartitionSnapshot) IsNil() bool {
	return o.isNil
}

func (o *PartitionSnapshot) Clear() {
	o.Release()
	o.isNil = true

	o.snapshotId.Clear()
	o.currentLeader.Clear()
	o.unknownTaggedFields = nil
}

func (o *PartitionSnapshot) SetDefault() {
	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil
	o.index = 0
	o.errorCode = 0
	o.snapshotId.SetDefault()
	o.currentLeader.SetDefault()
	o.size = 0
	o.position = 0
	o.unalignedRecords.ClearAndComplete()

	o.isNil = false
}

func (o *PartitionSnapshot) Equal(that *PartitionSnapshot) bool {
	if !fields.RawTaggedFieldsEqual(o.unknownTaggedFields, that.unknownTaggedFields) {
		return false
	}

	if o.index != that.index {
		return false
	}
	if o.errorCode != that.errorCode {
		return false
	}
	if !o.snapshotId.Equal(&that.snapshotId) {
		return false
	}
	if !o.currentLeader.Equal(&that.currentLeader) {
		return false
	}
	if o.size != that.size {
		return false
	}
	if o.position != that.position {
		return false
	}
	if !o.unalignedRecords.Equal(&that.unalignedRecords) {
		return false
	}

	return true
}

// SizeInBytes returns the size of this data structure in bytes when it's serialized
func (o *PartitionSnapshot) SizeInBytes(version int16) (int, error) {
	if o.IsNil() {
		return 0, nil
	}

	if err := o.validateNonIgnorableFields(version); err != nil {
		return 0, err
	}

	size := 0
	fieldSize := 0
	var err error

	indexField := fields.Int32{Context: partitionSnapshotIndex}
	fieldSize, err = indexField.SizeInBytes(version, o.index)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"index\" field")
	}
	size += fieldSize

	errorCodeField := fields.Int16{Context: partitionSnapshotErrorCode}
	fieldSize, err = errorCodeField.SizeInBytes(version, o.errorCode)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"errorCode\" field")
	}
	size += fieldSize

	fieldSize, err = o.snapshotId.SizeInBytes(version)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"snapshotId\" field")
	}
	size += fieldSize

	sizeField := fields.Int64{Context: partitionSnapshotSize}
	fieldSize, err = sizeField.SizeInBytes(version, o.size)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"size\" field")
	}
	size += fieldSize

	positionField := fields.Int64{Context: partitionSnapshotPosition}
	fieldSize, err = positionField.SizeInBytes(version, o.position)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"position\" field")
	}
	size += fieldSize

	unalignedRecordsField := fields.Records{Context: partitionSnapshotUnalignedRecords}
	fieldSize, err = unalignedRecordsField.SizeInBytes(version, &o.unalignedRecords)
	if err != nil {
		return 0, errors.WrapIf(err, "couldn't compute size of \"unalignedRecords\" field")
	}
	size += fieldSize

	// tagged fields
	numTaggedFields := int64(o.getTaggedFieldsCount(version))
	if numTaggedFields > 0xffffffff {
		return 0, errors.New(strings.Join([]string{"invalid tagged fields count:", strconv.Itoa(int(numTaggedFields))}, " "))
	}
	if version < PartitionSnapshotLowestSupportedFlexVersion() || version > PartitionSnapshotHighestSupportedFlexVersion() {
		if numTaggedFields > 0 {
			return 0, errors.New(strings.Join([]string{"tagged fields were set, but version", strconv.Itoa(int(version)), "of this message does not support them"}, " "))
		}

		return size, nil
	}

	taggedFieldsSize := varint.Uint32Size(uint32(numTaggedFields)) // bytes for serializing the number of tagged fields
	fieldSize = 0

	currentLeaderDefaultValue := partitionsnapshot.LeaderIdAndEpochDefault()
	if partitionSnapshotCurrentLeader.IsTaggedVersion(version) && !o.currentLeader.Equal(&currentLeaderDefaultValue) {
		fieldSize, err = o.currentLeader.SizeInBytes(version)
		if err != nil {
			return 0, errors.WrapIf(err, "couldn't compute size of \"currentLeader\" field")
		}
		if int64(fieldSize) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid \"currentLeader\" tagged field value length:", strconv.Itoa(fieldSize)}, " "))
		}
		fieldSize += varint.Uint32Size(uint32(fieldSize)) // bytes for serializing the length of the "currentLeader" field
		fieldSize += varint.Uint32Size(0)                 // bytes for serializing the tag of the "currentLeader" field
		taggedFieldsSize += fieldSize
	}

	for i := range o.unknownTaggedFields {
		length := len(o.unknownTaggedFields[i].Value())
		if int64(length) > 0xffffffff {
			return 0, errors.New(strings.Join([]string{"invalid field value length:", strconv.Itoa(length), ", tag:", strconv.Itoa(int(o.unknownTaggedFields[i].Tag()))}, " "))
		}
		taggedFieldsSize += varint.Uint32Size(o.unknownTaggedFields[i].Tag()) // bytes for serializing the tag of the unknown tag
		taggedFieldsSize += varint.Uint32Size(uint32(length))                 // bytes for serializing the length of the unknown tagged field
		taggedFieldsSize += length
	}

	size += taggedFieldsSize

	return size, nil
}

// Release releases the dynamically allocated fields of this object by returning then to object pools
func (o *PartitionSnapshot) Release() {
	if o.IsNil() {
		return
	}

	for i := range o.unknownTaggedFields {
		o.unknownTaggedFields[i].Release()
	}
	o.unknownTaggedFields = nil

	o.snapshotId.Release()
	o.currentLeader.Release()
	o.unalignedRecords.Release()
}

func (o *PartitionSnapshot) getTaggedFieldsCount(version int16) int {
	numTaggedFields := len(o.unknownTaggedFields)

	if partitionSnapshotCurrentLeader.IsTaggedVersion(version) {
		currentLeaderDefaultValue := partitionsnapshot.LeaderIdAndEpochDefault()
		if !o.currentLeader.Equal(&currentLeaderDefaultValue) {
			numTaggedFields++
		}
	}

	return numTaggedFields
}

// validateNonIgnorableFields throws an error if any non-ignorable field not supported by current version is set to
// non-default value
func (o *PartitionSnapshot) validateNonIgnorableFields(version int16) error {
	return nil
}

func PartitionSnapshotLowestSupportedVersion() int16 {
	return 0
}

func PartitionSnapshotHighestSupportedVersion() int16 {
	return 32767
}

func PartitionSnapshotLowestSupportedFlexVersion() int16 {
	return 0
}

func PartitionSnapshotHighestSupportedFlexVersion() int16 {
	return 32767
}

func PartitionSnapshotDefault() PartitionSnapshot {
	var d PartitionSnapshot
	d.SetDefault()

	return d
}
